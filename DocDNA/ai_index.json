{
  "project_root": "/home/danno/MyApps/chatterbox (copy)",
  "modules": {
    "Voice_Samples.mel": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "process_audio_file",
          "doc": "Processes an audio file to ensure its Mel-frame count is within limits."
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "os",
        "librosa",
        "soundfile",
        "pydub",
        "shutil"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "sys_exit"
      ]
    },
    "chatterbox_gui": {
      "module_docstring": "ChatterboxTTS GUI Interface",
      "classes": [
        {
          "name": "NoScrollSpinBox",
          "doc": "",
          "methods": [
            "wheelEvent"
          ]
        },
        {
          "name": "NoScrollDoubleSpinBox",
          "doc": "",
          "methods": [
            "wheelEvent"
          ]
        },
        {
          "name": "StructuredStatusPanel",
          "doc": "Structured status panel widget for TTS operations",
          "methods": [
            "setup_ui",
            "update_status",
            "reset"
          ]
        },
        {
          "name": "ChunkingTestWindow",
          "doc": "Popup window to display chunking test results",
          "methods": [
            "set_chunking_results",
            "copy_to_clipboard"
          ]
        },
        {
          "name": "ProcessThread",
          "doc": "Thread to run background processes without blocking GUI",
          "methods": [
            "parse_and_emit_status",
            "parse_chunk_progress",
            "run"
          ]
        },
        {
          "name": "ChatterboxMainWindow",
          "doc": "",
          "methods": [
            "init_token_logging",
            "closeEvent",
            "test_audio_system_startup",
            "create_convert_book_tab",
            "handle_micro_batching_toggle",
            "handle_vader_toggle",
            "reload_tab1_from_config",
            "create_config_tab",
            "create_resume_tab",
            "create_combine_tab",
            "create_prepare_text_tab",
            "create_test_chunking_tab",
            "create_repair_tool_tab",
            "create_json_generate_tab",
            "create_output_area_widget",
            "create_output_area",
            "browse_book_folder",
            "populate_text_files",
            "browse_voice_file",
            "play_voice_sample",
            "stop_voice_sample",
            "handle_asr_toggle",
            "analyze_system",
            "update_asr_models",
            "apply_preset",
            "browse_combine_book",
            "browse_prepare_text",
            "browse_json_file",
            "update_status_display",
            "start_conversion",
            "run_book_conversion",
            "refresh_incomplete_books",
            "resume_processing",
            "combine_audio",
            "combine_audio_wav_only",
            "on_combine_finished",
            "on_combine_wav_finished",
            "prepare_text",
            "on_text_prep_finished",
            "test_chunking",
            "refresh_repair_books",
            "load_chunks_for_repair",
            "detect_and_update_voice_info",
            "refresh_available_voices",
            "search_chunks_for_repair",
            "search_chunks_by_number",
            "select_chunk_for_repair",
            "update_repair_chunk_display",
            "save_chunk_changes",
            "play_original_chunk",
            "resynthesize_chunk",
            "play_revised_chunk",
            "accept_chunk_revision",
            "generate_from_json",
            "browse_m4b_file",
            "regenerate_m4b",
            "on_conversion_finished",
            "reset_config_defaults",
            "save_original_config_values",
            "setup_config_change_tracking",
            "mark_config_changed",
            "check_unsaved_config_changes",
            "on_tab_changed",
            "save_config_to_file",
            "play_m4b_file",
            "detect_and_update_device_status",
            "log_output",
            "update_tab1_status_panel",
            "update_tab8_status_panel",
            "refresh_json_voices",
            "browse_json_file",
            "generate_from_json",
            "json_generation_finished",
            "play_json_audio",
            "pause_json_audio",
            "stop_json_audio",
            "rewind_json_audio",
            "ff_json_audio",
            "json_slider_pressed",
            "json_slider_released",
            "create_voice_analyzer_tab",
            "try_install_voice_analyzer_deps",
            "build_voice_analyzer_gui",
            "setup_analyzer_scores_tab",
            "setup_analyzer_plots_tab",
            "setup_analyzer_recommendations_tab",
            "setup_analyzer_comparison_tab",
            "setup_analyzer_autofix_tab",
            "add_analyzer_files",
            "remove_analyzer_file",
            "clear_analyzer_files",
            "on_analyzer_file_selected",
            "analyze_selected_voice",
            "analyze_all_voices",
            "start_voice_analysis",
            "update_analyzer_result_display",
            "create_score_widget",
            "clear_analyzer_scores_grid",
            "clear_analyzer_displays",
            "update_analyzer_ui_state",
            "select_all_analyzer_fixes",
            "select_recommended_analyzer_fixes",
            "clear_all_analyzer_fixes",
            "update_analyzer_fix_ui_state",
            "apply_analyzer_fixes",
            "export_analyzer_plot",
            "export_analyzer_report",
            "update_analyzer_visualization",
            "update_analyzer_comparison_plot",
            "create_audio_output_analyzer_tab",
            "setup_output_quality_tab",
            "setup_output_technical_tab",
            "setup_output_standards_tab",
            "setup_output_chapter_tab",
            "setup_output_comparison_tab",
            "add_output_files",
            "remove_output_file",
            "clear_output_files",
            "on_output_file_selected",
            "analyze_selected_output",
            "analyze_all_outputs",
            "start_output_analysis",
            "analyze_audiobook_file",
            "estimate_bitrate",
            "update_output_result_display",
            "create_output_score_widget",
            "clear_output_quality_grid",
            "clear_output_displays",
            "update_output_comparison_plot",
            "update_output_analyzer_ui_state",
            "export_output_report",
            "export_output_plot"
          ]
        },
        {
          "name": "GUIOutput",
          "doc": "",
          "methods": [
            "write",
            "flush"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "wheelEvent",
          "doc": ""
        },
        {
          "name": "wheelEvent",
          "doc": ""
        },
        {
          "name": "setup_ui",
          "doc": ""
        },
        {
          "name": "update_status",
          "doc": "Update status panel fields"
        },
        {
          "name": "reset",
          "doc": "Reset all fields to default state"
        },
        {
          "name": "set_chunking_results",
          "doc": "Set the chunking test results"
        },
        {
          "name": "copy_to_clipboard",
          "doc": "Copy results to clipboard"
        },
        {
          "name": "parse_and_emit_status",
          "doc": "Parse clean status text and emit structured data"
        },
        {
          "name": "parse_chunk_progress",
          "doc": "Parse chunk progress from stdout text"
        },
        {
          "name": "run",
          "doc": ""
        },
        {
          "name": "init_token_logging",
          "doc": "Initialize simple token usage logging"
        },
        {
          "name": "closeEvent",
          "doc": "Handle GUI close event - cleanup audio playback"
        },
        {
          "name": "test_audio_system_startup",
          "doc": "Test audio system on startup and show status"
        },
        {
          "name": "create_convert_book_tab",
          "doc": "Tab 1: Convert a book (GenTTS) - Main functionality"
        },
        {
          "name": "handle_micro_batching_toggle",
          "doc": ""
        },
        {
          "name": "handle_vader_toggle",
          "doc": "When VADER is turned off, also turn off micro-batching (Tab 2) and config flags."
        },
        {
          "name": "reload_tab1_from_config",
          "doc": ""
        },
        {
          "name": "create_config_tab",
          "doc": "Tab 2: Configuration Settings"
        },
        {
          "name": "create_resume_tab",
          "doc": "Tab 3: Resume from specific chunk"
        },
        {
          "name": "create_combine_tab",
          "doc": "Tab 4: Combine audio chunks"
        },
        {
          "name": "create_prepare_text_tab",
          "doc": "Tab 5: Prepare text file for chunking"
        },
        {
          "name": "create_test_chunking_tab",
          "doc": "Tab 6: Test chunking logic"
        },
        {
          "name": "create_repair_tool_tab",
          "doc": "Tab 7: Chunk repair tool"
        },
        {
          "name": "create_json_generate_tab",
          "doc": "Tab 8: Generate from JSON with voice selection and playback controls"
        },
        {
          "name": "create_output_area_widget",
          "doc": "Create output/log area as a widget for splitter"
        },
        {
          "name": "create_output_area",
          "doc": "Legacy method for backwards compatibility"
        },
        {
          "name": "browse_book_folder",
          "doc": ""
        },
        {
          "name": "populate_text_files",
          "doc": "Populate text file combo box when book folder is selected"
        },
        {
          "name": "browse_voice_file",
          "doc": ""
        },
        {
          "name": "play_voice_sample",
          "doc": "Play the selected voice sample"
        },
        {
          "name": "stop_voice_sample",
          "doc": "Stop voice sample playback"
        },
        {
          "name": "handle_asr_toggle",
          "doc": "Show/hide ASR configuration when ASR is toggled"
        },
        {
          "name": "analyze_system",
          "doc": "Analyze system capabilities and display summary"
        },
        {
          "name": "update_asr_models",
          "doc": "Update ASR model display based on selected level"
        },
        {
          "name": "apply_preset",
          "doc": ""
        },
        {
          "name": "browse_combine_book",
          "doc": ""
        },
        {
          "name": "browse_prepare_text",
          "doc": ""
        },
        {
          "name": "browse_json_file",
          "doc": ""
        },
        {
          "name": "update_status_display",
          "doc": "Update the status display - now uses TTS generation status panel"
        },
        {
          "name": "start_conversion",
          "doc": "Button click handler - validates inputs and starts conversion"
        },
        {
          "name": "run_book_conversion",
          "doc": "Execute the actual book conversion with all GUI parameters"
        },
        {
          "name": "refresh_incomplete_books",
          "doc": "Refresh list of incomplete books"
        },
        {
          "name": "resume_processing",
          "doc": "Resume processing selected book"
        },
        {
          "name": "combine_audio",
          "doc": "Combine audio chunks"
        },
        {
          "name": "combine_audio_wav_only",
          "doc": "Combine audio chunks to WAV only (no M4B conversion)"
        },
        {
          "name": "on_combine_finished",
          "doc": "Handle combine completion"
        },
        {
          "name": "on_combine_wav_finished",
          "doc": "Handle WAV-only combine completion"
        },
        {
          "name": "prepare_text",
          "doc": "Prepare text for chunking"
        },
        {
          "name": "on_text_prep_finished",
          "doc": "Handle text preparation completion"
        },
        {
          "name": "test_chunking",
          "doc": "Test chunking logic and show results in popup window"
        },
        {
          "name": "refresh_repair_books",
          "doc": "Refresh the list of available books for repair"
        },
        {
          "name": "load_chunks_for_repair",
          "doc": "Load chunks for the selected book"
        },
        {
          "name": "detect_and_update_voice_info",
          "doc": "Detect and display voice information for the current book"
        },
        {
          "name": "refresh_available_voices",
          "doc": "Refresh voice candidates for current book (not all voices)"
        },
        {
          "name": "search_chunks_for_repair",
          "doc": "Search for chunks containing the specified text"
        },
        {
          "name": "search_chunks_by_number",
          "doc": "Search for chunks by chunk number"
        },
        {
          "name": "select_chunk_for_repair",
          "doc": "Select a chunk for editing"
        },
        {
          "name": "update_repair_chunk_display",
          "doc": "Update the chunk editor display with current chunk data"
        },
        {
          "name": "save_chunk_changes",
          "doc": "Save changes to the current chunk"
        },
        {
          "name": "play_original_chunk",
          "doc": "Play the original audio for the current chunk"
        },
        {
          "name": "resynthesize_chunk",
          "doc": "Resynthesize the current chunk with updated parameters"
        },
        {
          "name": "play_revised_chunk",
          "doc": "Play the revised audio for the current chunk"
        },
        {
          "name": "accept_chunk_revision",
          "doc": "Accept the revision by replacing original with revised audio"
        },
        {
          "name": "generate_from_json",
          "doc": "Generate audio from JSON"
        },
        {
          "name": "browse_m4b_file",
          "doc": "Browse and select a WAV or M4B file for regeneration or playback"
        },
        {
          "name": "regenerate_m4b",
          "doc": "Regenerate M4B file with new speed setting from WAV or M4B file"
        },
        {
          "name": "on_conversion_finished",
          "doc": "Handle conversion completion"
        },
        {
          "name": "reset_config_defaults",
          "doc": "Reload Tab 2 values from the saved config (defaults = current saved config)."
        },
        {
          "name": "save_original_config_values",
          "doc": "Save original config values to track changes"
        },
        {
          "name": "setup_config_change_tracking",
          "doc": "Connect all config widgets to change tracking"
        },
        {
          "name": "mark_config_changed",
          "doc": "Mark config as having unsaved changes"
        },
        {
          "name": "check_unsaved_config_changes",
          "doc": "Check if there are unsaved config changes and prompt user"
        },
        {
          "name": "on_tab_changed",
          "doc": "Handle tab change - check for unsaved config changes when leaving config tab"
        },
        {
          "name": "save_config_to_file",
          "doc": "Save current GUI settings to config file"
        },
        {
          "name": "play_m4b_file",
          "doc": "Open audio file in system default player with priority system"
        },
        {
          "name": "detect_and_update_device_status",
          "doc": "Detect and update device status in the GUI using comprehensive CUDA checking"
        },
        {
          "name": "log_output",
          "doc": "Add message to output log with ANSI code filtering"
        },
        {
          "name": "update_tab1_status_panel",
          "doc": "Update Tab 1 structured status panel with parsed data"
        },
        {
          "name": "update_tab8_status_panel",
          "doc": "Update Tab 8 structured status panel with parsed data"
        },
        {
          "name": "refresh_json_voices",
          "doc": "Refresh the list of all available voices for JSON generation"
        },
        {
          "name": "browse_json_file",
          "doc": "Browse for JSON chunks file"
        },
        {
          "name": "generate_from_json",
          "doc": "Generate audiobook from JSON file with selected voice"
        },
        {
          "name": "json_generation_finished",
          "doc": "Handle completion of JSON generation"
        },
        {
          "name": "play_json_audio",
          "doc": "Play the generated audiobook"
        },
        {
          "name": "pause_json_audio",
          "doc": "Pause/Resume audio playback"
        },
        {
          "name": "stop_json_audio",
          "doc": "Stop audio playback"
        },
        {
          "name": "rewind_json_audio",
          "doc": "Rewind 10 seconds (simplified implementation)"
        },
        {
          "name": "ff_json_audio",
          "doc": "Fast forward 10 seconds (simplified implementation)"
        },
        {
          "name": "json_slider_pressed",
          "doc": "Handle slider press for seeking"
        },
        {
          "name": "json_slider_released",
          "doc": "Handle slider release for seeking"
        },
        {
          "name": "create_voice_analyzer_tab",
          "doc": "Tab 9: Voice Sample Analyzer for TTS Suitability"
        },
        {
          "name": "try_install_voice_analyzer_deps",
          "doc": "Try to auto-install voice analyzer dependencies"
        },
        {
          "name": "build_voice_analyzer_gui",
          "doc": "Build the complete voice analyzer GUI directly in the tab"
        },
        {
          "name": "setup_analyzer_scores_tab",
          "doc": "Setup the scores display tab"
        },
        {
          "name": "setup_analyzer_plots_tab",
          "doc": "Setup the visualization tab with matplotlib"
        },
        {
          "name": "setup_analyzer_recommendations_tab",
          "doc": "Setup the recommendations tab"
        },
        {
          "name": "setup_analyzer_comparison_tab",
          "doc": "Setup the comparison tab"
        },
        {
          "name": "setup_analyzer_autofix_tab",
          "doc": "Setup the auto-fix tab with comprehensive audio processing fixes"
        },
        {
          "name": "add_analyzer_files",
          "doc": "Add voice sample files"
        },
        {
          "name": "remove_analyzer_file",
          "doc": "Remove selected file"
        },
        {
          "name": "clear_analyzer_files",
          "doc": "Clear all files"
        },
        {
          "name": "on_analyzer_file_selected",
          "doc": "Handle file selection"
        },
        {
          "name": "analyze_selected_voice",
          "doc": "Analyze selected voice file"
        },
        {
          "name": "analyze_all_voices",
          "doc": "Analyze all voice files"
        },
        {
          "name": "start_voice_analysis",
          "doc": "Start voice analysis"
        },
        {
          "name": "update_analyzer_result_display",
          "doc": "Update the display with analysis result"
        },
        {
          "name": "create_score_widget",
          "doc": "Create a score display widget"
        },
        {
          "name": "clear_analyzer_scores_grid",
          "doc": "Clear the scores grid"
        },
        {
          "name": "clear_analyzer_displays",
          "doc": "Clear all result displays"
        },
        {
          "name": "update_analyzer_ui_state",
          "doc": "Update UI element states"
        },
        {
          "name": "select_all_analyzer_fixes",
          "doc": "Select all fix checkboxes"
        },
        {
          "name": "select_recommended_analyzer_fixes",
          "doc": "Select recommended fixes based on current analysis"
        },
        {
          "name": "clear_all_analyzer_fixes",
          "doc": "Clear all fix checkboxes"
        },
        {
          "name": "update_analyzer_fix_ui_state",
          "doc": "Update the fix UI state based on selections"
        },
        {
          "name": "apply_analyzer_fixes",
          "doc": "Apply selected audio fixes using the comprehensive Auto-Fix system"
        },
        {
          "name": "export_analyzer_plot",
          "doc": "Export current analysis plot"
        },
        {
          "name": "export_analyzer_report",
          "doc": "Export current analysis report"
        },
        {
          "name": "update_analyzer_visualization",
          "doc": "Update the analysis plots"
        },
        {
          "name": "update_analyzer_comparison_plot",
          "doc": "Update comparison plot for multiple samples"
        },
        {
          "name": "create_audio_output_analyzer_tab",
          "doc": "Tab 10: Audio Output Analyzer for finished audiobooks"
        },
        {
          "name": "setup_output_quality_tab",
          "doc": "Setup the quality scores tab for output analysis"
        },
        {
          "name": "setup_output_technical_tab",
          "doc": "Setup the technical analysis tab"
        },
        {
          "name": "setup_output_standards_tab",
          "doc": "Setup the production standards compliance tab"
        },
        {
          "name": "setup_output_chapter_tab",
          "doc": "Setup the chapter analysis tab"
        },
        {
          "name": "setup_output_comparison_tab",
          "doc": "Setup the output comparison tab"
        },
        {
          "name": "add_output_files",
          "doc": "Add audiobook files for analysis"
        },
        {
          "name": "remove_output_file",
          "doc": "Remove selected audiobook file"
        },
        {
          "name": "clear_output_files",
          "doc": "Clear all audiobook files"
        },
        {
          "name": "on_output_file_selected",
          "doc": "Handle audiobook file selection"
        },
        {
          "name": "analyze_selected_output",
          "doc": "Analyze selected audiobook file"
        },
        {
          "name": "analyze_all_outputs",
          "doc": "Analyze all audiobook files"
        },
        {
          "name": "start_output_analysis",
          "doc": "Start audiobook output analysis"
        },
        {
          "name": "analyze_audiobook_file",
          "doc": "Comprehensive analysis of audiobook file"
        },
        {
          "name": "estimate_bitrate",
          "doc": "Estimate bitrate from file size and duration"
        },
        {
          "name": "update_output_result_display",
          "doc": "Update the display with audiobook analysis result"
        },
        {
          "name": "create_output_score_widget",
          "doc": "Create a score display widget for output analysis"
        },
        {
          "name": "clear_output_quality_grid",
          "doc": "Clear the quality scores grid"
        },
        {
          "name": "clear_output_displays",
          "doc": "Clear all output analysis displays"
        },
        {
          "name": "update_output_comparison_plot",
          "doc": "Update comparison plot for multiple audiobook files"
        },
        {
          "name": "update_output_analyzer_ui_state",
          "doc": "Update UI element states for output analyzer"
        },
        {
          "name": "export_output_report",
          "doc": "Export audiobook analysis report"
        },
        {
          "name": "export_output_plot",
          "doc": "Export audiobook quality plot"
        },
        {
          "name": "write",
          "doc": ""
        },
        {
          "name": "flush",
          "doc": ""
        },
        {
          "name": "debug_scroll",
          "doc": ""
        },
        {
          "name": "progress_callback",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "os",
        "subprocess",
        "threading",
        "io",
        "contextlib",
        "pathlib",
        "PyQt5.QtWidgets",
        "PyQt5.QtCore",
        "PyQt5.QtGui",
        "config.config",
        "modules.tts_engine",
        "interface",
        "modules.resume_handler",
        "tools.combine_only",
        "wrapper.chunk_tool",
        "utils.generate_from_json",
        "modules.tts_engine",
        "importlib",
        "config.config",
        "voice_analyzer.analyzer",
        "voice_analyzer.audio_processor",
        "re",
        "re",
        "config",
        "modules.tts_engine",
        "config.config",
        "pathlib",
        "PyQt5.QtWidgets",
        "re",
        "datetime",
        "voice_analyzer.analyzer",
        "voice_analyzer.audio_processor",
        "voice_analyzer.analyzer",
        "os",
        "librosa",
        "numpy",
        "pathlib",
        "sys",
        "io",
        "modules.simple_token_logger",
        "pygame",
        "logging",
        "config",
        "PyQt5.QtWidgets",
        "config.config",
        "config.config",
        "pygame",
        "pygame",
        "pygame",
        "modules.system_detector",
        "modules.system_detector",
        "modules.terminal_logger",
        "modules.tts_engine",
        "modules.resume_handler",
        "tools.combine_only",
        "tools.combine_only",
        "modules.text_processor",
        "io",
        "contextlib",
        "wrapper.chunk_loader",
        "pathlib",
        "modules.voice_detector",
        "wrapper.chunk_search",
        "collections",
        "copy",
        "wrapper.chunk_loader",
        "os",
        "datetime",
        "pathlib",
        "wrapper.chunk_synthesizer",
        "pathlib",
        "wrapper.chunk_revisions",
        "modules.file_manager",
        "pathlib",
        "os",
        "re",
        "subprocess",
        "sys",
        "torch",
        "subprocess",
        "sys",
        "modules.file_manager",
        "modules.gui_json_generator",
        "subprocess",
        "platform",
        "matplotlib.backends.backend_qt5agg",
        "matplotlib.figure",
        "matplotlib.backends.backend_qt5agg",
        "matplotlib.figure",
        "matplotlib.pyplot",
        "numpy",
        "matplotlib.backends.backend_qt5agg",
        "matplotlib.figure",
        "numpy",
        "modules.progress_tracker",
        "modules.progress_tracker",
        "platform",
        "platform",
        "platform",
        "traceback",
        "modules.system_detector",
        "traceback",
        "wrapper.chunk_player",
        "wrapper.chunk_player",
        "modules.terminal_logger",
        "modules.tts_engine",
        "modules.token_analyzer",
        "pathlib",
        "subprocess",
        "sys",
        "voice_analyzer.audio_processor",
        "voice_analyzer.visualizer",
        "wrapper.chunk_loader",
        "torch",
        "gc",
        "winsound",
        "winsound",
        "re",
        "subprocess"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "env_reads",
        "subprocess",
        "sys_exit"
      ]
    },
    "config.__init__": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "config.config": {
      "module_docstring": "GenTTS Configuration Module",
      "classes": [],
      "functions": [],
      "imports": [
        "os",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "env_reads"
      ]
    },
    "gradio_app": {
      "module_docstring": "Gradio Interface for ChatterboxTTS Audiobook Pipeline",
      "classes": [],
      "functions": [
        {
          "name": "initialize_tts",
          "doc": "Initialize TTS model once at startup"
        },
        {
          "name": "process_text_to_chunks",
          "doc": "Process text into chunks with metadata"
        },
        {
          "name": "generate_chunk_audio",
          "doc": "Generate audio for a single chunk"
        },
        {
          "name": "generate_audiobook",
          "doc": "Main function to generate audiobook from text and voice sample"
        },
        {
          "name": "create_interface",
          "doc": "Create the Gradio interface"
        }
      ],
      "imports": [
        "gradio",
        "torch",
        "tempfile",
        "os",
        "json",
        "zipfile",
        "pathlib",
        "logging",
        "datetime",
        "traceback",
        "src.chatterbox.tts",
        "modules.text_processor",
        "modules.audio_processor",
        "modules.file_manager",
        "vaderSentiment.vaderSentiment",
        "torchaudio"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "gradio_launcher": {
      "module_docstring": "Comprehensive Gradio Launcher for ChatterboxTTS",
      "classes": [
        {
          "name": "GradioLauncher",
          "doc": "",
          "methods": [
            "print_header",
            "check_python_version",
            "check_working_directory",
            "create_directories",
            "check_package_installed",
            "compare_versions",
            "setup_virtual_environment",
            "install_package",
            "check_and_install_requirements",
            "check_gpu_availability",
            "verify_installation",
            "launch_interface",
            "run"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "doc": "Main entry point"
        },
        {
          "name": "print_header",
          "doc": "Print launcher header"
        },
        {
          "name": "check_python_version",
          "doc": "Check if Python version is compatible"
        },
        {
          "name": "check_working_directory",
          "doc": "Verify we're in the correct directory"
        },
        {
          "name": "create_directories",
          "doc": "Create required directories if they don't exist"
        },
        {
          "name": "check_package_installed",
          "doc": "Check if a package is installed and get its version"
        },
        {
          "name": "compare_versions",
          "doc": "Compare version strings"
        },
        {
          "name": "setup_virtual_environment",
          "doc": "Set up virtual environment if in externally managed environment"
        },
        {
          "name": "install_package",
          "doc": "Install a package using pip (with virtual environment support)"
        },
        {
          "name": "check_and_install_requirements",
          "doc": "Check and install all required packages"
        },
        {
          "name": "check_gpu_availability",
          "doc": "Check for GPU availability"
        },
        {
          "name": "verify_installation",
          "doc": "Verify that all components can be imported"
        },
        {
          "name": "launch_interface",
          "doc": "Launch the Gradio interface"
        },
        {
          "name": "run",
          "doc": "Run the complete launcher process"
        }
      ],
      "imports": [
        "sys",
        "os",
        "subprocess",
        "importlib",
        "pkg_resources",
        "pathlib",
        "time",
        "chatterbox",
        "torch",
        "gradio_main_interface",
        "parselmouth"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess",
        "sys_exit"
      ]
    },
    "gradio_main_interface": {
      "module_docstring": "ChatterboxTTS Gradio Web Interface - Main Entry Point",
      "classes": [],
      "functions": [
        {
          "name": "detect_device_status",
          "doc": "Detect and return device status information"
        },
        {
          "name": "create_placeholder_tab",
          "doc": "Create a placeholder tab for future implementation"
        },
        {
          "name": "create_main_interface",
          "doc": "Create the main ChatterboxTTS Gradio interface with all tabs"
        },
        {
          "name": "launch_interface",
          "doc": "Launch the main interface"
        }
      ],
      "imports": [
        "gradio",
        "sys",
        "os",
        "pathlib",
        "gradio_tabs.tab1_convert_book",
        "gradio_tabs.tab2_configuration",
        "gradio_tabs.tab4_combine_audio",
        "gradio_tabs.tab5_prepare_text",
        "gradio_tabs.tab6_settings",
        "gradio_tabs.tab7_chunk_tools",
        "gradio_tabs.tab8_json_generate",
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "gradio_tabs.__init__": {
      "module_docstring": "ChatterboxTTS Gradio Tabs Package",
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "gradio_tabs.tab1_convert_book": {
      "module_docstring": "Gradio Tab 1: Convert Book",
      "classes": [],
      "functions": [
        {
          "name": "parse_progress_stats",
          "doc": "Parse progress statistics from TTS engine output"
        },
        {
          "name": "get_progress_stats",
          "doc": "Get current progress statistics for UI update"
        },
        {
          "name": "get_book_folders",
          "doc": "Get available book folders from Text_Input directory"
        },
        {
          "name": "get_text_files_in_folder",
          "doc": "Get text files in selected book folder"
        },
        {
          "name": "get_voice_samples",
          "doc": "Get available voice samples from Voice_Samples directory"
        },
        {
          "name": "find_generated_audiobook",
          "doc": "Find the generated audiobook files"
        },
        {
          "name": "run_book_conversion",
          "doc": "Run the actual book conversion - Direct call to TTS engine with progress monitoring"
        },
        {
          "name": "regenerate_m4b_file",
          "doc": "Regenerate M4B file with new playback speed using unified convert_to_m4b"
        },
        {
          "name": "list_text_files",
          "doc": "Scans a folder path and populates the text file dropdown."
        },
        {
          "name": "play_voice_sample",
          "doc": "Plays the audio file at the given path."
        },
        {
          "name": "create_convert_book_tab",
          "doc": "Create Tab 1: Convert Book with all GUI functionality"
        },
        {
          "name": "handle_voice_upload",
          "doc": "Handle voice file upload and show player"
        },
        {
          "name": "get_session_audiobooks",
          "doc": "Get list of M4B files from current session, sorted by creation time (newest first)"
        },
        {
          "name": "update_audiobook_dropdowns",
          "doc": "Update audiobook dropdowns - after conversion both show latest, after regeneration only playback updates"
        },
        {
          "name": "update_audiobook_dropdowns_after_conversion",
          "doc": "Update both dropdowns to show the newest generated file after conversion"
        },
        {
          "name": "update_playback_only",
          "doc": "Update only the playback dropdown after regeneration"
        },
        {
          "name": "load_selected_audiobook",
          "doc": "Load selected audiobook into player"
        },
        {
          "name": "handle_asr_toggle",
          "doc": "Show/hide ASR configuration when ASR is toggled"
        },
        {
          "name": "analyze_system",
          "doc": "Analyze system capabilities and return summary"
        },
        {
          "name": "update_asr_models",
          "doc": "Update ASR model display based on selected level"
        },
        {
          "name": "start_conversion",
          "doc": "Start the actual book conversion - file upload version"
        },
        {
          "name": "handle_m4b_regeneration",
          "doc": "Handle M4B regeneration and update player"
        },
        {
          "name": "apply_preset",
          "doc": ""
        },
        {
          "name": "get_current_stats",
          "doc": "Get current progress statistics by monitoring output files"
        },
        {
          "name": "get_status_and_results",
          "doc": "Get conversion status and results after completion"
        },
        {
          "name": "progress_callback",
          "doc": "Callback function to update progress from TTS engine"
        },
        {
          "name": "run_conversion_thread",
          "doc": ""
        }
      ],
      "imports": [
        "gradio",
        "os",
        "sys",
        "threading",
        "subprocess",
        "tempfile",
        "json",
        "warnings",
        "re",
        "time",
        "pathlib",
        "typing",
        "config.config",
        "importlib.util",
        "modules.tts_engine",
        "modules.tts_engine",
        "modules.file_manager",
        "pygame",
        "modules.path_validator",
        "traceback",
        "modules.system_detector",
        "modules.system_detector",
        "tempfile",
        "shutil",
        "datetime",
        "threading",
        "modules.system_detector",
        "json"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "gradio_tabs.tab2_configuration": {
      "module_docstring": "Gradio Tab 2: Configuration Settings (file-backed)",
      "classes": [],
      "functions": [
        {
          "name": "create_configuration_tab",
          "doc": ""
        },
        {
          "name": "save_configuration",
          "doc": ""
        },
        {
          "name": "reload_configuration",
          "doc": ""
        },
        {
          "name": "reset_configuration",
          "doc": ""
        },
        {
          "name": "field_value_from_file",
          "doc": ""
        }
      ],
      "imports": [
        "gradio",
        "re",
        "ast",
        "os",
        "shutil",
        "tempfile",
        "datetime",
        "pathlib",
        "config.config",
        "importlib",
        "config",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "gradio_tabs.tab4_combine_audio": {
      "module_docstring": "Gradio Tab 4: Combine Audio",
      "classes": [],
      "functions": [
        {
          "name": "get_available_books",
          "doc": "Get list of books with audio chunks available for combining"
        },
        {
          "name": "get_book_info",
          "doc": "Get detailed information about a book's audio chunks"
        },
        {
          "name": "run_combine_operation",
          "doc": "Run the audio combine operation"
        },
        {
          "name": "create_combine_audio_tab",
          "doc": "Create Tab 4: Combine Audio with all GUI functionality"
        },
        {
          "name": "update_book_info",
          "doc": "Update book information when selection changes"
        },
        {
          "name": "refresh_book_list",
          "doc": "Refresh the list of available books"
        },
        {
          "name": "get_selected_book_path",
          "doc": "Get the actual book path from selection or manual input"
        },
        {
          "name": "start_combine_operation",
          "doc": "Start the combine operation"
        },
        {
          "name": "stop_combine_operation",
          "doc": "Stop the current combine operation"
        },
        {
          "name": "get_current_status",
          "doc": "Get current operation status for periodic updates"
        },
        {
          "name": "combine_audio_for_book",
          "doc": ""
        },
        {
          "name": "get_audio_files_in_directory",
          "doc": ""
        },
        {
          "name": "get_wav_duration",
          "doc": ""
        },
        {
          "name": "run_combine_thread",
          "doc": ""
        }
      ],
      "imports": [
        "gradio",
        "os",
        "sys",
        "threading",
        "time",
        "pathlib",
        "typing",
        "tools.combine_only",
        "modules.file_manager",
        "modules.audio_processor"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "gradio_tabs.tab5_prepare_text": {
      "module_docstring": "Gradio Tab 5: Prepare Text",
      "classes": [],
      "functions": [
        {
          "name": "get_available_text_files",
          "doc": "Find available text files for preparation"
        },
        {
          "name": "load_text_file_info",
          "doc": "Load information about selected text file"
        },
        {
          "name": "start_text_preparation",
          "doc": "Start text preparation with enriched chunking"
        },
        {
          "name": "get_preparation_status",
          "doc": "Get current preparation status"
        },
        {
          "name": "stop_text_preparation",
          "doc": "Stop current preparation (if possible)"
        },
        {
          "name": "create_prepare_text_tab",
          "doc": "Create Tab 5: Prepare Text with all GUI functionality"
        },
        {
          "name": "refresh_file_list",
          "doc": "Refresh text files list"
        },
        {
          "name": "show_next_steps",
          "doc": "Show next steps information"
        },
        {
          "name": "generate_enriched_chunks",
          "doc": ""
        },
        {
          "name": "preparation_worker",
          "doc": ""
        }
      ],
      "imports": [
        "gradio",
        "os",
        "sys",
        "threading",
        "time",
        "json",
        "pathlib",
        "typing",
        "modules.tts_engine",
        "config.config",
        "modules.path_validator"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "gradio_tabs.tab6_settings": {
      "module_docstring": "Gradio Tab 6: Settings",
      "classes": [
        {
          "name": "ConfigManager",
          "doc": "Manages configuration reloading and validation.",
          "methods": [
            "load_current_config",
            "reload_config",
            "save_config_value",
            "get_config_categories"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_config_editor",
          "doc": "Create configuration editor interface."
        },
        {
          "name": "create_config_backup",
          "doc": "Create configuration backup interface."
        },
        {
          "name": "create_chunking_test",
          "doc": "Create chunking test interface."
        },
        {
          "name": "create_system_info",
          "doc": "Create system information display."
        },
        {
          "name": "create_settings_tab",
          "doc": "Create the main settings tab interface."
        },
        {
          "name": "create_settings_tab_interface",
          "doc": "Main entry point for the settings tab."
        },
        {
          "name": "load_current_config",
          "doc": "Load current configuration values."
        },
        {
          "name": "reload_config",
          "doc": "Reload the configuration module."
        },
        {
          "name": "save_config_value",
          "doc": "Save a configuration value (in-memory for now)."
        },
        {
          "name": "get_config_categories",
          "doc": "Group configuration keys by category based on prefixes and naming."
        },
        {
          "name": "reload_config",
          "doc": ""
        },
        {
          "name": "save_all_changes",
          "doc": ""
        },
        {
          "name": "create_backup",
          "doc": ""
        },
        {
          "name": "restore_backup",
          "doc": ""
        },
        {
          "name": "run_chunking_test",
          "doc": "Run the chunking test"
        },
        {
          "name": "get_system_info",
          "doc": ""
        }
      ],
      "imports": [
        "gradio",
        "os",
        "sys",
        "json",
        "importlib",
        "pathlib",
        "typing",
        "config",
        "modules.text_processor",
        "io",
        "contextlib"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "gradio_tabs.tab7_chunk_tools": {
      "module_docstring": "Gradio Tab 7: Chunk Tools",
      "classes": [],
      "functions": [
        {
          "name": "get_available_repair_books",
          "doc": "Get list of books available for chunk repair/editing"
        },
        {
          "name": "load_book_chunks",
          "doc": "Load chunks for selected book"
        },
        {
          "name": "search_for_chunks",
          "doc": "Search for chunks containing the query text"
        },
        {
          "name": "select_chunk_for_editing",
          "doc": "Select a chunk for editing from search results"
        },
        {
          "name": "save_chunk_changes",
          "doc": "Save changes to the current chunk"
        },
        {
          "name": "play_original_audio",
          "doc": "Play the original audio for the current chunk"
        },
        {
          "name": "resynthesize_chunk_audio",
          "doc": "Regenerate audio for the current chunk with new parameters"
        },
        {
          "name": "play_revised_audio",
          "doc": "Play the revised audio for the current chunk"
        },
        {
          "name": "accept_chunk_revision",
          "doc": "Accept the current chunk revision"
        },
        {
          "name": "create_chunk_tools_tab",
          "doc": "Create Tab 7: Chunk Tools with all GUI functionality"
        },
        {
          "name": "refresh_book_list",
          "doc": "Refresh the available books list"
        },
        {
          "name": "refresh_voice_candidates",
          "doc": "Refresh voice candidates for current book"
        },
        {
          "name": "load_chunks",
          "doc": ""
        },
        {
          "name": "save_chunks",
          "doc": ""
        },
        {
          "name": "search_chunks",
          "doc": ""
        },
        {
          "name": "update_chunk",
          "doc": ""
        },
        {
          "name": "play_chunk_audio",
          "doc": ""
        },
        {
          "name": "synthesize_chunk",
          "doc": ""
        },
        {
          "name": "accept_revision",
          "doc": ""
        },
        {
          "name": "get_likely_voices_for_book",
          "doc": ""
        },
        {
          "name": "play_audio",
          "doc": ""
        },
        {
          "name": "resynth_worker",
          "doc": ""
        },
        {
          "name": "play_audio",
          "doc": ""
        }
      ],
      "imports": [
        "gradio",
        "os",
        "sys",
        "threading",
        "time",
        "json",
        "pathlib",
        "typing",
        "wrapper.chunk_loader",
        "wrapper.chunk_search",
        "wrapper.chunk_editor",
        "wrapper.chunk_synthesizer",
        "wrapper.chunk_player",
        "wrapper.chunk_revisions",
        "modules.voice_detector",
        "config.config"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "gradio_tabs.tab8_json_generate": {
      "module_docstring": "Gradio Tab 8: JSON Generate",
      "classes": [],
      "functions": [
        {
          "name": "get_available_json_files",
          "doc": "Find available JSON chunk files for generation"
        },
        {
          "name": "get_available_voices",
          "doc": "Get list of available voice samples"
        },
        {
          "name": "load_json_file_info",
          "doc": "Load information about selected JSON file"
        },
        {
          "name": "start_json_generation",
          "doc": "Start JSON-to-audiobook generation"
        },
        {
          "name": "get_generation_status",
          "doc": "Get current generation status"
        },
        {
          "name": "stop_json_generation",
          "doc": "Stop current generation (if possible)"
        },
        {
          "name": "play_audio",
          "doc": "Play generated audiobook"
        },
        {
          "name": "create_json_generate_tab",
          "doc": "Create Tab 8: JSON Generate with all GUI functionality"
        },
        {
          "name": "refresh_json_files",
          "doc": "Refresh JSON files list"
        },
        {
          "name": "refresh_voice_list",
          "doc": "Refresh voice samples list"
        },
        {
          "name": "show_download_info",
          "doc": "Show download/playback instructions"
        },
        {
          "name": "generate_audiobook_from_json",
          "doc": ""
        },
        {
          "name": "list_voice_samples",
          "doc": ""
        },
        {
          "name": "generation_worker",
          "doc": ""
        }
      ],
      "imports": [
        "gradio",
        "os",
        "sys",
        "threading",
        "time",
        "json",
        "subprocess",
        "pathlib",
        "typing",
        "modules.gui_json_generator",
        "modules.file_manager",
        "config.config"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "interface": {
      "module_docstring": "==============================================================================",
      "classes": [],
      "functions": [
        {
          "name": "signal_handler",
          "doc": "Handle Ctrl+C gracefully"
        },
        {
          "name": "prompt_book_selection",
          "doc": "Interactive book selection from available directories"
        },
        {
          "name": "prompt_voice_selection",
          "doc": "Interactive voice selection from available samples"
        },
        {
          "name": "prompt_tts_params",
          "doc": "Interactive TTS parameter configuration"
        },
        {
          "name": "pipeline_book_processing",
          "doc": "Processes a queue of books, calling the main processing function for each."
        },
        {
          "name": "main",
          "doc": "Main entry point for GenTTS processing"
        },
        {
          "name": "main_with_resume",
          "doc": "Main entry point with resume option"
        },
        {
          "name": "get_float_input",
          "doc": ""
        },
        {
          "name": "get_yes_no_input",
          "doc": ""
        },
        {
          "name": "get_choice_input",
          "doc": ""
        }
      ],
      "imports": [
        "warnings",
        "os",
        "sys",
        "signal",
        "torch",
        "argparse",
        "pathlib",
        "src.chatterbox.tts",
        "config.config",
        "modules.text_processor",
        "src.chatterbox.tts",
        "modules.audio_processor",
        "modules.tts_engine",
        "modules.file_manager",
        "modules.progress_tracker",
        "modules.resume_handler",
        "tools.combine_only",
        "modules.system_detector",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": []
    },
    "launch": {
      "module_docstring": "ChatterboxTTS Launcher",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "os",
        "sys",
        "subprocess",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess",
        "sys_exit"
      ]
    },
    "main_launcher": {
      "module_docstring": "GenTTS Wrapper Launcher",
      "classes": [],
      "functions": [
        {
          "name": "prompt_menu",
          "doc": ""
        },
        {
          "name": "prepare_chunk_file",
          "doc": "Unified chunk prep that calls the centralized chunk generation function."
        },
        {
          "name": "main_with_resume",
          "doc": "Modified main function that includes resume option"
        },
        {
          "name": "wrapper_main",
          "doc": ""
        },
        {
          "name": "get_float_input",
          "doc": ""
        },
        {
          "name": "get_yes_no_input",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "logging",
        "modules.text_processor",
        "vaderSentiment.vaderSentiment",
        "wrapper.chunk_loader",
        "wrapper.chunk_tool",
        "modules.resume_handler",
        "tools.combine_only",
        "pathlib",
        "interface",
        "config.config",
        "modules.tts_engine",
        "utils.generate_from_json"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.advanced_optimizations": {
      "module_docstring": "Advanced Optimizations Module",
      "classes": [
        {
          "name": "AdvancedOptimizer",
          "doc": "Advanced optimization suite for ChatterboxTTS performance",
          "methods": [
            "diagnose_and_fix_torch_compile",
            "apply_smart_torch_compile",
            "apply_advanced_int8_quantization",
            "apply_memory_optimizations",
            "revert_optimizations"
          ]
        }
      ],
      "functions": [
        {
          "name": "set_warmup_mode",
          "doc": "Set global warm-up mode flag to use safe optimizations"
        },
        {
          "name": "get_advanced_optimizer",
          "doc": "Get global advanced optimizer instance"
        },
        {
          "name": "optimize_model_advanced",
          "doc": "Apply comprehensive advanced optimizations to ChatterboxTTS model"
        },
        {
          "name": "diagnose_and_fix_torch_compile",
          "doc": "Diagnose and fix common torch.compile issues based on 2025 research"
        },
        {
          "name": "apply_smart_torch_compile",
          "doc": "Apply torch.compile with intelligent backend selection and error handling"
        },
        {
          "name": "apply_advanced_int8_quantization",
          "doc": "Apply advanced INT8 quantization based on 2025 research"
        },
        {
          "name": "apply_memory_optimizations",
          "doc": "Apply comprehensive memory optimizations based on 2025 research"
        },
        {
          "name": "revert_optimizations",
          "doc": "Revert all applied optimizations"
        }
      ],
      "imports": [
        "torch",
        "os",
        "warnings",
        "subprocess",
        "pathlib",
        "logging",
        "typing",
        "triton",
        "torch._dynamo"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "modules.asr_manager": {
      "module_docstring": "ASR Manager Module",
      "classes": [],
      "functions": [
        {
          "name": "get_real_time_vram_status",
          "doc": "Get current GPU memory usage in real-time"
        },
        {
          "name": "calculate_available_vram_for_asr",
          "doc": "Calculate VRAM available for ASR with safety buffer"
        },
        {
          "name": "can_model_fit_gpu",
          "doc": "Check if a specific ASR model can fit in available VRAM"
        },
        {
          "name": "try_load_model_with_fallback",
          "doc": "Try to load model on primary device, fallback to secondary if it fails"
        },
        {
          "name": "load_asr_model_adaptive",
          "doc": "Adaptive ASR model loading with real-time VRAM checking and intelligent fallback"
        },
        {
          "name": "cleanup_asr_model",
          "doc": "Clean up ASR model to free memory"
        },
        {
          "name": "get_asr_memory_info",
          "doc": "Get memory information for ASR debugging"
        },
        {
          "name": "convert_device_name",
          "doc": ""
        }
      ],
      "imports": [
        "torch",
        "logging",
        "pathlib",
        "config.config",
        "whisper",
        "whisper"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.audio_processor": {
      "module_docstring": "ChatterboxTTS Audio Processing & Quality Control Module",
      "classes": [],
      "functions": [
        {
          "name": "check_audio_health",
          "doc": "Enhanced audio health checking"
        },
        {
          "name": "detect_tts_hum_artifact",
          "doc": "Detect low-frequency TTS confusion hum using configurable parameters"
        },
        {
          "name": "smart_audio_validation",
          "doc": "Comprehensive audio validation with intelligent responses"
        },
        {
          "name": "has_mid_energy_drop",
          "doc": "Detect mid-chunk energy drops"
        },
        {
          "name": "detect_spectral_artifacts",
          "doc": "Enhanced spectral anomaly detection using MFCC analysis."
        },
        {
          "name": "evaluate_chunk_quality",
          "doc": "Composite quality evaluation for a single audio chunk."
        },
        {
          "name": "validate_output_matches_input",
          "doc": "Validate that TTS audio output matches the input text using ASR transcription."
        },
        {
          "name": "calculate_text_similarity",
          "doc": "Calculate similarity between two texts using word-level F1 score."
        },
        {
          "name": "adjust_parameters_for_retry",
          "doc": "Adjust TTS parameters for regeneration attempts."
        },
        {
          "name": "handle_problematic_chunks",
          "doc": "Handle chunks with audio issues - quarantine for review"
        },
        {
          "name": "pause_for_chunk_review",
          "doc": "Pause processing to allow manual chunk review/editing with proper workflow"
        },
        {
          "name": "detect_end_artifact",
          "doc": "Enhanced artifact detection"
        },
        {
          "name": "find_end_of_speech",
          "doc": "Find end of speech using Silero VAD"
        },
        {
          "name": "fade_out_wav",
          "doc": "Apply fade-out to audio"
        },
        {
          "name": "apply_smart_fade",
          "doc": "Apply smart fade with artifact detection"
        },
        {
          "name": "apply_smart_fade_memory",
          "doc": "Apply smart fade with artifact detection - in memory version"
        },
        {
          "name": "smart_audio_validation_memory",
          "doc": "Enhanced audio validation in memory - returns (audio, is_quarantined)"
        },
        {
          "name": "add_contextual_silence_memory",
          "doc": "Add appropriate silence based on content boundary type - in memory"
        },
        {
          "name": "smart_fade_out",
          "doc": "Smart fade-out for natural audio endings"
        },
        {
          "name": "trim_audio_endpoint",
          "doc": "Trim audio to the detected end of speech using RMS energy analysis."
        },
        {
          "name": "process_audio_with_trimming_and_silence",
          "doc": "Complete audio processing: trim to speech endpoint + add punctuation-based silence."
        },
        {
          "name": "add_contextual_silence",
          "doc": "Add appropriate silence based on content boundary type"
        },
        {
          "name": "add_chunk_end_silence",
          "doc": "Add configurable silence to end of chunk if enabled"
        },
        {
          "name": "get_wav_duration",
          "doc": "Get WAV file duration"
        },
        {
          "name": "get_chunk_audio_duration",
          "doc": "Get actual audio duration from WAV file"
        },
        {
          "name": "normalize_text",
          "doc": ""
        }
      ],
      "imports": [
        "numpy",
        "soundfile",
        "logging",
        "shutil",
        "re",
        "time",
        "pathlib",
        "pydub",
        "config.config",
        "librosa",
        "re",
        "torch",
        "os",
        "pydub",
        "config.config",
        "wave",
        "tempfile",
        "os",
        "modules.asr_manager"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.bandwidth_monitor": {
      "module_docstring": "Real-time Memory Bandwidth Monitor for TTS Inference",
      "classes": [
        {
          "name": "RealTimeBandwidthMonitor",
          "doc": "Monitor GPU memory bandwidth during TTS inference",
          "methods": [
            "start_monitoring",
            "stop_monitoring"
          ]
        },
        {
          "name": "TTSBandwidthProfiler",
          "doc": "Profile memory bandwidth during TTS operations",
          "methods": [
            "profile_tts_generation"
          ]
        }
      ],
      "functions": [
        {
          "name": "monitor_tts_bandwidth",
          "doc": "Convenience function to monitor TTS bandwidth"
        },
        {
          "name": "start_monitoring",
          "doc": "Start real-time bandwidth monitoring"
        },
        {
          "name": "stop_monitoring",
          "doc": "Stop monitoring and return results"
        },
        {
          "name": "profile_tts_generation",
          "doc": "Profile bandwidth during TTS generation"
        }
      ],
      "imports": [
        "subprocess",
        "threading",
        "time",
        "queue",
        "psutil",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "modules.batch_processor": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [
        "argparse",
        "json",
        "sys",
        "pathlib",
        "modules.tts_engine"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": []
    },
    "modules.cuda_optimizer": {
      "module_docstring": "CUDA Kernel Optimization Module",
      "classes": [
        {
          "name": "CudaOptimizer",
          "doc": "CUDA kernel and memory optimization manager",
          "methods": [
            "apply_cuda_optimizations",
            "optimize_tensor_memory_layout",
            "create_optimized_tensor",
            "preallocate_batch_tensors",
            "get_preallocated_tensor",
            "async_batch_inference",
            "pipeline_batch_processing",
            "fused_attention_with_cache",
            "optimize_batch_processing",
            "clear_memory_efficiently",
            "restore_original_settings",
            "get_optimization_summary"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_cuda_optimizer",
          "doc": "Factory function to create and configure CUDA optimizer"
        },
        {
          "name": "apply_cuda_optimizations",
          "doc": "Apply comprehensive CUDA optimizations"
        },
        {
          "name": "optimize_tensor_memory_layout",
          "doc": "Optimize tensor memory layout for better cache performance"
        },
        {
          "name": "create_optimized_tensor",
          "doc": "Create a tensor with optimal memory layout"
        },
        {
          "name": "preallocate_batch_tensors",
          "doc": "Pre-allocate tensors for common batch sizes and sequence lengths"
        },
        {
          "name": "get_preallocated_tensor",
          "doc": "Get a pre-allocated tensor if available, otherwise create new one"
        },
        {
          "name": "async_batch_inference",
          "doc": "Execute batch inference asynchronously using CUDA streams"
        },
        {
          "name": "pipeline_batch_processing",
          "doc": "Pipeline batch processing with overlapped memory and compute operations"
        },
        {
          "name": "fused_attention_with_cache",
          "doc": "Optimized attention computation with KV cache"
        },
        {
          "name": "optimize_batch_processing",
          "doc": "Calculate optimal batch processing parameters"
        },
        {
          "name": "clear_memory_efficiently",
          "doc": "Efficiently clear GPU memory"
        },
        {
          "name": "restore_original_settings",
          "doc": "Restore original CUDA settings"
        },
        {
          "name": "get_optimization_summary",
          "doc": "Get summary of applied optimizations"
        }
      ],
      "imports": [
        "torch",
        "torch.nn.functional",
        "logging",
        "typing",
        "gc"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.dual_model_optimizer": {
      "module_docstring": "Dual Model Parallel Inference Optimizer",
      "classes": [
        {
          "name": "DualModelParallelOptimizer",
          "doc": "Run 2 ChatterboxTTS models in parallel to maximize bandwidth utilization",
          "methods": [
            "load_dual_models",
            "generate_parallel_pair",
            "benchmark_dual_vs_single",
            "process_chunks_parallel",
            "cleanup"
          ]
        }
      ],
      "functions": [
        {
          "name": "test_dual_model_optimization",
          "doc": "Test dual model optimization approach"
        },
        {
          "name": "load_dual_models",
          "doc": "Load two identical ChatterboxTTS models for parallel inference"
        },
        {
          "name": "generate_parallel_pair",
          "doc": "Generate audio for 2 chunks in parallel using both models"
        },
        {
          "name": "benchmark_dual_vs_single",
          "doc": "Benchmark dual-model vs single-model performance"
        },
        {
          "name": "process_chunks_parallel",
          "doc": "Process multiple chunks using dual-model parallelization"
        },
        {
          "name": "cleanup",
          "doc": "Clean up resources"
        }
      ],
      "imports": [
        "torch",
        "asyncio",
        "threading",
        "time",
        "concurrent.futures",
        "pathlib",
        "sys",
        "pathlib",
        "src.chatterbox.tts",
        "modules.real_tts_optimizer",
        "config.config",
        "gc"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.dual_t3_engine": {
      "module_docstring": "Dual T3 Parallel Inference Engine",
      "classes": [
        {
          "name": "WorkItem",
          "doc": "Work item for T3 worker input queue",
          "methods": []
        },
        {
          "name": "TokenResult",
          "doc": "Result from T3 worker for S3Gen processing",
          "methods": []
        },
        {
          "name": "AudioResult",
          "doc": "Final result from S3Gen worker",
          "methods": []
        },
        {
          "name": "TTSWorker",
          "doc": "Independent TTS worker thread with dedicated CUDA stream.",
          "methods": [
            "run",
            "stop"
          ]
        },
        {
          "name": "S3GenWorker",
          "doc": "S3Gen worker thread with dedicated CUDA stream.",
          "methods": [
            "run",
            "stop"
          ]
        },
        {
          "name": "DualT3Coordinator",
          "doc": "Coordinates dual T3 workers with completion-based dispatch.",
          "methods": [
            "start",
            "stop",
            "process_chunks"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_dual_t3_models",
          "doc": "Load 2 T3 models + 1 S3Gen model for dual parallel inference."
        },
        {
          "name": "run",
          "doc": "Main worker loop - completion-based dispatch"
        },
        {
          "name": "stop",
          "doc": "Signal worker to stop gracefully"
        },
        {
          "name": "run",
          "doc": "Main worker loop"
        },
        {
          "name": "stop",
          "doc": "Signal worker to stop gracefully"
        },
        {
          "name": "start",
          "doc": "Start all worker threads"
        },
        {
          "name": "stop",
          "doc": "Stop all worker threads gracefully"
        },
        {
          "name": "process_chunks",
          "doc": "Process chunks using completion-based dispatch."
        }
      ],
      "imports": [
        "torch",
        "threading",
        "queue",
        "time",
        "logging",
        "numpy",
        "typing",
        "dataclasses",
        "pathlib",
        "config.config",
        "src.chatterbox.tts",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.dual_tts_engine": {
      "module_docstring": "Dual TTS Parallel Inference Engine (Simplified)",
      "classes": [
        {
          "name": "WorkItem",
          "doc": "Work item for TTS worker",
          "methods": []
        },
        {
          "name": "AudioResult",
          "doc": "Result from TTS worker",
          "methods": []
        },
        {
          "name": "TTSWorker",
          "doc": "Complete TTS worker with dedicated CUDA stream.",
          "methods": [
            "run",
            "stop"
          ]
        },
        {
          "name": "DualTTSCoordinator",
          "doc": "Coordinates two TTS workers with completion-based dispatch.",
          "methods": [
            "start",
            "stop",
            "process_chunks"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_dual_tts_models",
          "doc": "Load 2 complete ChatterboxTTS models for parallel inference."
        },
        {
          "name": "run",
          "doc": "Main worker loop"
        },
        {
          "name": "stop",
          "doc": "Stop worker gracefully"
        },
        {
          "name": "start",
          "doc": "Start workers"
        },
        {
          "name": "stop",
          "doc": "Stop workers"
        },
        {
          "name": "process_chunks",
          "doc": "Process chunks with completion-based dispatch."
        }
      ],
      "imports": [
        "torch",
        "threading",
        "queue",
        "time",
        "logging",
        "numpy",
        "typing",
        "dataclasses",
        "pathlib",
        "config.config",
        "src.chatterbox.tts",
        "pathlib",
        "src.chatterbox.tts",
        "torch.nn.functional",
        "src.chatterbox.models.s3tokenizer"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.file_manager": {
      "module_docstring": "ChatterboxTTS File Management & Media Processing Module",
      "classes": [],
      "functions": [
        {
          "name": "is_ffmpeg_available",
          "doc": "Check if FFmpeg is available in system PATH"
        },
        {
          "name": "ffmpeg_error_message",
          "doc": "Standard error message for missing FFmpeg"
        },
        {
          "name": "list_voice_samples",
          "doc": "List available voice samples"
        },
        {
          "name": "ensure_voice_sample_compatibility",
          "doc": "Ensure voice sample is compatible with TTS (24kHz mono)"
        },
        {
          "name": "run_ffmpeg",
          "doc": "Run FFmpeg command with error handling"
        },
        {
          "name": "convert_to_m4b_with_peak_normalization",
          "doc": "Convert WAV to M4B with peak normalization"
        },
        {
          "name": "convert_to_m4b_with_loudness_normalization",
          "doc": "Convert WAV to M4B with two-pass loudness normalization"
        },
        {
          "name": "convert_to_m4b_with_simple_normalization",
          "doc": "Convert WAV to M4B with simple peak normalization"
        },
        {
          "name": "convert_to_m4b",
          "doc": "Convert WAV to M4B with configurable normalization and optional custom speed/sample rate"
        },
        {
          "name": "add_metadata_to_m4b",
          "doc": "Add metadata and cover to M4B"
        },
        {
          "name": "chunk_sort_key",
          "doc": "Extracts the chunk number for natural sorting"
        },
        {
          "name": "create_concat_file",
          "doc": "Create FFmpeg concat file for audio chunks"
        },
        {
          "name": "cleanup_temp_files",
          "doc": "Clean up temporary files matching patterns"
        },
        {
          "name": "sanitize_filename",
          "doc": "Sanitize filename for cross-platform compatibility"
        },
        {
          "name": "setup_book_directories",
          "doc": "Set up directory structure for book processing"
        },
        {
          "name": "find_book_files",
          "doc": "Find text files, cover, and metadata for a book"
        },
        {
          "name": "combine_audio_chunks",
          "doc": "Combine audio chunks into single file using FFmpeg"
        },
        {
          "name": "get_audio_files_in_directory",
          "doc": "Get sorted list of audio files matching pattern"
        },
        {
          "name": "verify_audio_file",
          "doc": "Verify audio file is valid and readable"
        },
        {
          "name": "verify_chunk_completeness",
          "doc": "Verify all expected chunks exist and are valid"
        },
        {
          "name": "export_processing_log",
          "doc": "Export comprehensive processing log"
        },
        {
          "name": "save_chunk_info",
          "doc": "Save chunk information for debugging/resume"
        },
        {
          "name": "apply_batch_binning",
          "doc": "Round VADER parameters to nearest bin for better microbatching"
        },
        {
          "name": "load_chunk_info",
          "doc": "Load chunk information if available"
        }
      ],
      "imports": [
        "subprocess",
        "soundfile",
        "os",
        "re",
        "time",
        "logging",
        "pathlib",
        "config.config",
        "json",
        "re",
        "json",
        "json"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "modules.gpu_bandwidth_monitor": {
      "module_docstring": "GPU Memory Bandwidth Monitor",
      "classes": [
        {
          "name": "GPUSample",
          "doc": "Single GPU measurement sample",
          "methods": []
        },
        {
          "name": "GPUBandwidthMonitor",
          "doc": "Monitor GPU memory bandwidth utilization using nvidia-smi.",
          "methods": [
            "run",
            "stop",
            "get_statistics",
            "print_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "run",
          "doc": "Main monitoring loop"
        },
        {
          "name": "stop",
          "doc": "Stop monitoring"
        },
        {
          "name": "get_statistics",
          "doc": "Calculate statistics from collected samples"
        },
        {
          "name": "print_report",
          "doc": "Print formatted statistics report"
        }
      ],
      "imports": [
        "threading",
        "time",
        "subprocess",
        "logging",
        "typing",
        "dataclasses"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "modules.gui_json_generator": {
      "module_docstring": "GUI JSON Audio Generation Module",
      "classes": [],
      "functions": [
        {
          "name": "generate_audiobook_from_json",
          "doc": "Generate complete audiobook from JSON chunks file."
        },
        {
          "name": "get_book_name_from_json_path",
          "doc": "Extract book name from JSON file path."
        }
      ],
      "imports": [
        "torch",
        "pathlib",
        "sys",
        "concurrent.futures",
        "time",
        "datetime",
        "config.config",
        "modules.tts_engine",
        "modules.file_manager",
        "wrapper.chunk_loader",
        "src.chatterbox.tts",
        "modules.progress_tracker",
        "tools.combine_only"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.onnx_optimizer": {
      "module_docstring": "ONNX Optimization Module for ChatterboxTTS T3 Model",
      "classes": [
        {
          "name": "T3ONNXOptimizer",
          "doc": "Convert T3 model to ONNX for maximum inference speed",
          "methods": [
            "convert_t3_to_onnx",
            "onnx_inference",
            "benchmark_onnx_vs_pytorch"
          ]
        },
        {
          "name": "T3InferenceWrapper",
          "doc": "",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "optimize_model_with_onnx",
          "doc": "Main function to apply ONNX optimization to ChatterboxTTS"
        },
        {
          "name": "convert_t3_to_onnx",
          "doc": "Convert T3 inference to optimized ONNX model"
        },
        {
          "name": "onnx_inference",
          "doc": "Run ultra-fast ONNX inference"
        },
        {
          "name": "benchmark_onnx_vs_pytorch",
          "doc": "Benchmark ONNX vs PyTorch performance"
        },
        {
          "name": "onnx_wrapped_inference",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        }
      ],
      "imports": [
        "torch",
        "onnx",
        "onnxruntime",
        "numpy",
        "pathlib",
        "tempfile",
        "os",
        "time",
        "onnxruntime.tools"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.path_validator": {
      "module_docstring": "Path Validation Module",
      "classes": [],
      "functions": [
        {
          "name": "detect_problematic_characters",
          "doc": "Detect problematic characters in a path name"
        },
        {
          "name": "suggest_safe_path",
          "doc": "Suggest a safe alternative for a problematic path name"
        },
        {
          "name": "validate_book_path",
          "doc": "Validate a book name for path safety"
        },
        {
          "name": "validate_and_create_audiobook_path",
          "doc": "Validate book name and create safe audiobook path"
        },
        {
          "name": "check_existing_audiobook_paths",
          "doc": "Check existing audiobook directories for problematic paths"
        },
        {
          "name": "format_path_warning_html",
          "doc": "Format path validation warning as HTML for Gradio"
        },
        {
          "name": "format_path_warning_text",
          "doc": "Format path validation warning as plain text"
        }
      ],
      "imports": [
        "re",
        "pathlib",
        "typing",
        "modules.file_manager",
        "config.config",
        "config.config"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.progress_tracker": {
      "module_docstring": "ChatterboxTTS Progress Tracking & Performance Monitoring Module",
      "classes": [
        {
          "name": "PerformanceTracker",
          "doc": "PERFORMANCE TRACKING CLASS - Core metrics collection and analysis",
          "methods": [
            "log_chunk_completion",
            "log_batch_completion",
            "get_performance_summary"
          ]
        }
      ],
      "functions": [
        {
          "name": "setup_logging",
          "doc": "Setup logging configuration"
        },
        {
          "name": "log_console",
          "doc": "Log to both console and file with optional color"
        },
        {
          "name": "log_run",
          "doc": "Log to run file"
        },
        {
          "name": "log_chunk_progress",
          "doc": "Enhanced progress logging with configurable display frequency and average it/s"
        },
        {
          "name": "display_batch_progress",
          "doc": "Display batch processing progress"
        },
        {
          "name": "display_final_summary",
          "doc": "Display final processing summary"
        },
        {
          "name": "monitor_vram_usage",
          "doc": "Real-time VRAM monitoring with threshold warnings"
        },
        {
          "name": "monitor_gpu_utilization",
          "doc": "Monitor GPU utilization if pynvml is available"
        },
        {
          "name": "optimize_memory_if_needed",
          "doc": "Trigger memory optimization when thresholds are exceeded"
        },
        {
          "name": "display_system_info",
          "doc": "Display system information at startup"
        },
        {
          "name": "log_processing_error",
          "doc": "Log processing errors with categorization"
        },
        {
          "name": "log_processing_warning",
          "doc": "Log processing warnings with categorization"
        },
        {
          "name": "create_status_line",
          "doc": "Create a single-line status for real-time updates"
        },
        {
          "name": "update_status_line",
          "doc": "Update status line in place"
        },
        {
          "name": "export_performance_report",
          "doc": "Export detailed performance report"
        },
        {
          "name": "fmt",
          "doc": ""
        },
        {
          "name": "log_chunk_completion",
          "doc": "Log individual chunk completion"
        },
        {
          "name": "log_batch_completion",
          "doc": "Log batch completion"
        },
        {
          "name": "get_performance_summary",
          "doc": "Get comprehensive performance summary"
        }
      ],
      "imports": [
        "time",
        "sys",
        "logging",
        "datetime",
        "pathlib",
        "config.config",
        "config.config",
        "torch",
        "torch",
        "modules.smart_reload_manager",
        "config.config",
        "pynvml",
        "modules.tts_engine",
        "modules.terminal_logger",
        "modules.terminal_logger",
        "torch",
        "gc"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.real_tts_optimizer": {
      "module_docstring": "Real TTS Performance Optimizer",
      "classes": [
        {
          "name": "RealTTSOptimizer",
          "doc": "Real optimizations that actually affect TTS performance",
          "methods": [
            "fp32_fallback_mode",
            "apply_optimizations",
            "restore_original_methods"
          ]
        }
      ],
      "functions": [
        {
          "name": "get_tts_optimizer",
          "doc": "Get or create the global TTS optimizer"
        },
        {
          "name": "optimize_chatterbox_model",
          "doc": "Apply real optimizations to ChatterboxTTS model"
        },
        {
          "name": "optimized_inference",
          "doc": "Context manager for optimized inference"
        },
        {
          "name": "fp32_fallback_mode",
          "doc": "Context manager to temporarily disable mixed precision for a single operation."
        },
        {
          "name": "apply_optimizations",
          "doc": "Apply real optimizations to ChatterboxTTS model with detailed tracking"
        },
        {
          "name": "restore_original_methods",
          "doc": "Restore original methods (cleanup)"
        },
        {
          "name": "optimized_t3_inference",
          "doc": ""
        },
        {
          "name": "optimized_s3gen_inference",
          "doc": ""
        }
      ],
      "imports": [
        "torch",
        "logging",
        "contextlib",
        "config.config",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.resume_handler": {
      "module_docstring": "ChatterboxTTS Resume Handler Module",
      "classes": [],
      "functions": [
        {
          "name": "analyze_existing_chunks",
          "doc": "CHUNK ANALYSIS FUNCTION - Core resume logic"
        },
        {
          "name": "suggest_resume_point",
          "doc": "Suggest optimal resume point based on existing chunks"
        },
        {
          "name": "validate_resume_point",
          "doc": "Validate that resume point makes sense"
        },
        {
          "name": "process_book_folder_resume",
          "doc": "Enhanced book processing with resume capability"
        },
        {
          "name": "resume_book_from_chunk",
          "doc": "Interactive resume function for stuck book"
        },
        {
          "name": "find_incomplete_books",
          "doc": "Find books that appear to be incomplete"
        },
        {
          "name": "auto_resume_incomplete",
          "doc": "Automatically suggest resume for incomplete books"
        },
        {
          "name": "prompt_float",
          "doc": ""
        }
      ],
      "imports": [
        "torch",
        "time",
        "logging",
        "datetime",
        "pathlib",
        "config.config",
        "modules.text_processor",
        "modules.file_manager",
        "modules.audio_processor",
        "modules.progress_tracker",
        "modules.tts_engine",
        "src.chatterbox.tts",
        "concurrent.futures",
        "modules.tts_engine",
        "modules.tts_engine",
        "modules.tts_engine",
        "re",
        "shutil",
        "wrapper.chunk_loader",
        "modules.tts_engine",
        "gc",
        "modules.asr_manager",
        "modules.asr_manager",
        "modules.tts_engine"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.sequence_batch_processor": {
      "module_docstring": "True Sequence-Level Batch Processor",
      "classes": [
        {
          "name": "SequenceBatchProcessor",
          "doc": "True sequence-level batch processor that uses ChatterboxTTS.generate_batch()",
          "methods": [
            "analyze_batching_potential",
            "process_chunks_with_sequence_batching"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_sequence_batch_processor",
          "doc": "Factory function to create optimized sequence batch processor"
        },
        {
          "name": "analyze_batching_potential",
          "doc": "Analyze the batching potential of a chunk list"
        },
        {
          "name": "process_chunks_with_sequence_batching",
          "doc": "Process chunks using true sequence-level batching"
        }
      ],
      "imports": [
        "time",
        "logging",
        "typing",
        "collections",
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.simple_token_logger": {
      "module_docstring": "Simple token usage logger - just writes chunk_number,tokens,its_rate",
      "classes": [],
      "functions": [
        {
          "name": "init_token_log",
          "doc": "Initialize the token log file"
        },
        {
          "name": "log_chunk",
          "doc": "Log a chunk with tokens and it/s rate"
        }
      ],
      "imports": [
        "os",
        "datetime"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.system_detector": {
      "module_docstring": "System Resource Detection Module",
      "classes": [],
      "functions": [
        {
          "name": "get_gpu_memory",
          "doc": "Get total and available GPU memory in MB"
        },
        {
          "name": "get_system_memory",
          "doc": "Get total and available system RAM in MB"
        },
        {
          "name": "get_cpu_cores",
          "doc": "Get number of CPU cores"
        },
        {
          "name": "estimate_tts_vram_usage",
          "doc": "Estimate VRAM usage by ChatterboxTTS (updated based on real usage)"
        },
        {
          "name": "get_system_profile",
          "doc": "Get complete system resource profile"
        },
        {
          "name": "categorize_system",
          "doc": "Categorize system capabilities"
        },
        {
          "name": "get_safe_asr_models",
          "doc": "Get ASR models that can safely run on GPU with available VRAM"
        },
        {
          "name": "get_safe_cpu_models",
          "doc": "Get ASR models that can safely run on CPU with available RAM"
        },
        {
          "name": "recommend_asr_models",
          "doc": "Recommend Safe/Moderate/Insane ASR model configurations"
        },
        {
          "name": "print_system_summary",
          "doc": "Print a human-readable system summary"
        }
      ],
      "imports": [
        "psutil",
        "torch",
        "os",
        "sys",
        "pathlib",
        "config.config"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.t3_minimal_export": {
      "module_docstring": "T3 Minimal ONNX Export - Simplified approach with working T3Cond",
      "classes": [
        {
          "name": "T3WorkingWrapper",
          "doc": "",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_working_t3_cond",
          "doc": "Create T3Cond that matches working ChatterboxTTS usage"
        },
        {
          "name": "export_t3_minimal",
          "doc": "Export T3 with minimal working configuration"
        },
        {
          "name": "forward",
          "doc": "Working T3 forward with proper T3Cond"
        }
      ],
      "imports": [
        "sys",
        "pathlib",
        "torch",
        "torch.onnx",
        "onnxruntime",
        "numpy",
        "gc",
        "src.chatterbox.models.t3.modules.cond_enc",
        "modules.t3_standalone_export",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.t3_standalone_export": {
      "module_docstring": "T3 Standalone ONNX Export - Memory-efficient T3 ONNX conversion",
      "classes": [
        {
          "name": "T3MinimalWrapper",
          "doc": "",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "find_cached_model_files",
          "doc": "Find cached ChatterboxTTS model files"
        },
        {
          "name": "load_t3_minimal",
          "doc": "Load ONLY T3 model with minimal VRAM usage"
        },
        {
          "name": "create_minimal_t3_wrapper",
          "doc": "Create minimal T3 ONNX wrapper without complex conditioning"
        },
        {
          "name": "export_t3_standalone",
          "doc": "Export T3 to ONNX with minimal memory footprint"
        },
        {
          "name": "forward",
          "doc": "Simplified T3 forward for ONNX export"
        }
      ],
      "imports": [
        "sys",
        "pathlib",
        "torch",
        "torch.onnx",
        "onnxruntime",
        "numpy",
        "logging",
        "time",
        "gc",
        "safetensors",
        "os",
        "glob",
        "src.chatterbox.models.t3.t3",
        "src.chatterbox.models.tokenizers.tokenizer",
        "traceback",
        "src.chatterbox.models.t3.modules.cond_enc",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.terminal_logger": {
      "module_docstring": "Terminal Output Logger",
      "classes": [
        {
          "name": "TerminalLogger",
          "doc": "Captures terminal output and logs to file",
          "methods": [
            "start_logging",
            "stop_logging",
            "emit_chunk_summary",
            "get_running_avg_its",
            "write",
            "flush",
            "write_file_only",
            "set_eta_frequency",
            "set_batch_size"
          ]
        }
      ],
      "functions": [
        {
          "name": "start_terminal_logging",
          "doc": "Start logging all terminal output to file"
        },
        {
          "name": "stop_terminal_logging",
          "doc": "Stop logging terminal output"
        },
        {
          "name": "log_only",
          "doc": "Append a line to the terminal log without printing to the console."
        },
        {
          "name": "set_eta_frequency",
          "doc": ""
        },
        {
          "name": "set_batch_size",
          "doc": ""
        },
        {
          "name": "emit_chunk_summary",
          "doc": ""
        },
        {
          "name": "get_running_avg_its",
          "doc": "Module-level accessor for running avg it/s from per-chunk summaries."
        },
        {
          "name": "start_logging",
          "doc": "Start capturing terminal output"
        },
        {
          "name": "stop_logging",
          "doc": "Stop capturing terminal output"
        },
        {
          "name": "emit_chunk_summary",
          "doc": "Public: emit exactly one per\u2011chunk summary using the latest Sampling values."
        },
        {
          "name": "get_running_avg_its",
          "doc": "Return running average it/s across completed chunks (or None)."
        },
        {
          "name": "write",
          "doc": "Write text to both file and terminal, applying filtering logic to each line."
        },
        {
          "name": "flush",
          "doc": "Flush output streams"
        },
        {
          "name": "write_file_only",
          "doc": "Write text only to the log file without echoing to terminal."
        },
        {
          "name": "set_eta_frequency",
          "doc": ""
        },
        {
          "name": "set_batch_size",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "threading",
        "datetime",
        "pathlib",
        "config.config",
        "re",
        "re"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "file_io"
      ]
    },
    "modules.text_processor": {
      "module_docstring": "ChatterboxTTS Text Processing Module",
      "classes": [],
      "functions": [
        {
          "name": "load_abbreviations",
          "doc": "Load abbreviation-to-replacement mappings from external text file."
        },
        {
          "name": "create_sample_abbreviations_file",
          "doc": "Create a sample abbreviations file with common replacements"
        },
        {
          "name": "preprocess_abbreviations",
          "doc": "Replace abbreviations with TTS-friendly versions"
        },
        {
          "name": "smart_punctuate",
          "doc": "Enhanced punctuation normalization with abbreviation replacement."
        },
        {
          "name": "fix_short_sentence_artifacts",
          "doc": "Fix multiple short sentences that cause TTS errors."
        },
        {
          "name": "sentence_chunk_text",
          "doc": "CRITICAL CHUNKING ALGORITHM - Heart of the TTS preprocessing system"
        },
        {
          "name": "break_long_sentence_backwards",
          "doc": "Break a long sentence working backwards from the end to find natural punctuation."
        },
        {
          "name": "detect_punctuation_boundary",
          "doc": "Detect the ending punctuation of a text chunk for precise silence insertion."
        },
        {
          "name": "detect_content_boundaries",
          "doc": "Detect chapter breaks and paragraph endings for appropriate silence insertion."
        },
        {
          "name": "reload_abbreviations",
          "doc": "Reload abbreviations from file (useful for testing changes)"
        },
        {
          "name": "test_abbreviations",
          "doc": "Test abbreviation replacements on sample text"
        },
        {
          "name": "test_chunking",
          "doc": "Test the enhanced chunking with sample or custom text"
        },
        {
          "name": "get_chunk_bucket",
          "doc": "Determine which bucket a text chunk belongs to for torch.compile optimization"
        },
        {
          "name": "analyze_chunk_distribution",
          "doc": "Analyze the distribution of chunks across size buckets"
        },
        {
          "name": "calculate_optimization_potential",
          "doc": "Calculate potential optimization benefits from chunk bucketing"
        },
        {
          "name": "create_bucketed_chunk_groups",
          "doc": "Group chunks by size bucket for batch processing optimization"
        },
        {
          "name": "log_chunk_bucketing_stats",
          "doc": "Log chunk bucketing statistics for performance monitoring"
        }
      ],
      "imports": [
        "re",
        "logging",
        "pathlib",
        "config.config",
        "re",
        "re",
        "config.config",
        "config.config",
        "config.config",
        "config.config"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.token_analyzer": {
      "module_docstring": "Token Analyzer Module",
      "classes": [
        {
          "name": "TokenAnalyzer",
          "doc": "Analyzes chunks to predict optimal token requirements",
          "methods": [
            "predict_chunk_tokens",
            "analyze_chunks_json",
            "update_max_tokens_config"
          ]
        }
      ],
      "functions": [
        {
          "name": "get_token_analyzer",
          "doc": "Get global token analyzer instance"
        },
        {
          "name": "analyze_and_optimize_tokens",
          "doc": "Analyze chunks JSON and optionally update MAX_NEW_TOKENS"
        },
        {
          "name": "format_analysis_summary",
          "doc": "Format analysis results for GUI display"
        },
        {
          "name": "predict_chunk_tokens",
          "doc": "Predict token usage for a single chunk"
        },
        {
          "name": "analyze_chunks_json",
          "doc": "Analyze chunks JSON file and return token statistics"
        },
        {
          "name": "update_max_tokens_config",
          "doc": "Update MAX_NEW_TOKENS in config"
        }
      ],
      "imports": [
        "json",
        "numpy",
        "pathlib",
        "typing",
        "logging",
        "config.config",
        "re"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.token_calculator": {
      "module_docstring": "Token Calculator for T3 TTS Analysis",
      "classes": [
        {
          "name": "TokenAnalysis",
          "doc": "",
          "methods": []
        },
        {
          "name": "TTSTokenCalculator",
          "doc": "Calculate actual token usage vs reservations for TTS",
          "methods": [
            "analyze_chunks",
            "analyze_single_chunk",
            "print_analysis_summary",
            "print_real_audiobook_analysis"
          ]
        }
      ],
      "functions": [
        {
          "name": "analyze_real_audiobook_chunks",
          "doc": "Analyze real audiobook chunks from JSON file"
        },
        {
          "name": "analyze_test_chunks",
          "doc": "Analyze the standard test chunks (fallback)"
        },
        {
          "name": "analyze_chunks",
          "doc": "Analyze token usage for multiple text chunks"
        },
        {
          "name": "analyze_single_chunk",
          "doc": "Analyze token usage for a single text chunk"
        },
        {
          "name": "print_analysis_summary",
          "doc": "Print detailed token waste analysis"
        },
        {
          "name": "print_real_audiobook_analysis",
          "doc": "Enhanced analysis for real audiobook chunks with VADER context"
        }
      ],
      "imports": [
        "torch",
        "typing",
        "dataclasses",
        "json"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.token_usage_logger": {
      "module_docstring": "Token Usage Logger for T3 Performance Analysis",
      "classes": [
        {
          "name": "TokenUsageLogger",
          "doc": "Log token usage per chunk for performance analysis",
          "methods": [
            "start_chunk",
            "log_chunk_completion",
            "log_chunk_data",
            "get_log_summary",
            "print_summary"
          ]
        }
      ],
      "functions": [
        {
          "name": "initialize_token_logging",
          "doc": "Initialize global token usage logging"
        },
        {
          "name": "start_chunk_logging",
          "doc": "Start logging for a new chunk"
        },
        {
          "name": "log_chunk_tokens",
          "doc": "Log token usage for current chunk"
        },
        {
          "name": "log_chunk_data_direct",
          "doc": "Log chunk data directly"
        },
        {
          "name": "print_token_usage_summary",
          "doc": "Print summary of token usage"
        },
        {
          "name": "get_token_logger",
          "doc": "Get global token logger instance"
        },
        {
          "name": "start_chunk",
          "doc": "Mark the start of a new chunk"
        },
        {
          "name": "log_chunk_completion",
          "doc": "Log completion of current chunk with token usage"
        },
        {
          "name": "log_chunk_data",
          "doc": "Direct logging method for when data is already calculated"
        },
        {
          "name": "get_log_summary",
          "doc": "Get summary statistics from current log"
        },
        {
          "name": "print_summary",
          "doc": "Print summary of logged data"
        }
      ],
      "imports": [
        "os",
        "threading",
        "time",
        "typing",
        "datetime"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.tts_engine": {
      "module_docstring": "TTS Engine Module",
      "classes": [],
      "functions": [
        {
          "name": "clear_voice_cache",
          "doc": "Clear the global voice cache at start of new conversion"
        },
        {
          "name": "store_voice_cache",
          "doc": "Store voice embeddings from model to global cache"
        },
        {
          "name": "restore_voice_cache",
          "doc": "Restore voice embeddings from global cache to model"
        },
        {
          "name": "get_voice_cache_info",
          "doc": "Get information about current voice cache"
        },
        {
          "name": "find_chunks_json_file",
          "doc": "Find the corresponding chunks JSON file for a book"
        },
        {
          "name": "set_seed",
          "doc": "Sets the seed for torch, random, and numpy for reproducibility."
        },
        {
          "name": "monitor_gpu_activity",
          "doc": "Lightweight GPU monitoring for high-speed processing"
        },
        {
          "name": "optimize_memory_usage",
          "doc": "Aggressive memory management for 8GB VRAM"
        },
        {
          "name": "monitor_vram_usage",
          "doc": "Real-time VRAM monitoring"
        },
        {
          "name": "get_optimal_workers",
          "doc": "Dynamic worker allocation based on VRAM usage"
        },
        {
          "name": "prewarm_model_with_voice",
          "doc": "Pre-warm the TTS model with a voice sample to eliminate cold start quality issues."
        },
        {
          "name": "get_best_available_device",
          "doc": "Detect and return the best available device with proper fallback"
        },
        {
          "name": "load_optimized_model",
          "doc": "Load TTS model with REAL performance optimizations."
        },
        {
          "name": "patch_alignment_layer",
          "doc": "Patch alignment layer to avoid recursion"
        },
        {
          "name": "process_batch",
          "doc": ""
        },
        {
          "name": "process_one_chunk",
          "doc": ""
        },
        {
          "name": "smooth_sentiment_scores",
          "doc": "Apply sentiment smoothing to prevent harsh emotional transitions."
        },
        {
          "name": "generate_enriched_chunks",
          "doc": "Reads a text file, performs VADER sentiment analysis, and returns enriched chunks."
        },
        {
          "name": "create_parameter_microbatches",
          "doc": "Group chunks by their rounded TTS parameters for micro-batching efficiency."
        },
        {
          "name": "process_book_folder",
          "doc": "Enhanced book processing with batch processing to prevent hangs"
        },
        {
          "name": "process_single_batch",
          "doc": "Loads models and processes a single batch of chunks."
        },
        {
          "name": "patched_forward",
          "doc": ""
        },
        {
          "name": "log_run",
          "doc": ""
        },
        {
          "name": "gen_with_backoff",
          "doc": ""
        }
      ],
      "imports": [
        "torch",
        "threading",
        "gc",
        "time",
        "logging",
        "shutil",
        "sys",
        "numpy",
        "datetime",
        "concurrent.futures",
        "pathlib",
        "torchaudio",
        "config.config",
        "modules.text_processor",
        "modules.audio_processor",
        "modules.terminal_logger",
        "modules.file_manager",
        "modules.progress_tracker",
        "random",
        "numpy",
        "torch",
        "vaderSentiment.vaderSentiment",
        "wrapper.chunk_loader",
        "config.config",
        "gc",
        "tempfile",
        "os",
        "modules.file_manager",
        "src.chatterbox.tts",
        "modules.real_tts_optimizer",
        "config.config",
        "types",
        "pydub",
        "io",
        "soundfile",
        "difflib",
        "pydub",
        "modules.audio_processor",
        "collections",
        "src.chatterbox.tts",
        "torch",
        "gc",
        "pathlib",
        "src.chatterbox.tts",
        "modules.file_manager",
        "modules.asr_manager",
        "config.config",
        "config",
        "modules.audio_processor",
        "os",
        "modules.terminal_logger",
        "gc",
        "glob",
        "config",
        "config.config",
        "io",
        "soundfile",
        "pydub",
        "modules.terminal_logger",
        "modules.audio_processor",
        "modules.terminal_logger",
        "modules.asr_manager",
        "config.config",
        "config.config",
        "config.config",
        "modules.asr_manager",
        "gc",
        "modules.audio_processor",
        "modules.audio_processor",
        "modules.audio_processor",
        "traceback",
        "modules.voice_detector",
        "modules",
        "modules",
        "config",
        "modules.terminal_logger",
        "modules.terminal_logger",
        "modules.terminal_logger",
        "modules.terminal_logger",
        "modules.terminal_logger",
        "modules.real_tts_optimizer",
        "modules.terminal_logger",
        "modules.terminal_logger"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "file_io"
      ]
    },
    "modules.voice_detector": {
      "module_docstring": "Voice Detection Module",
      "classes": [],
      "functions": [
        {
          "name": "get_likely_voices_for_book",
          "doc": "Get the most likely voice candidates for a book using the 3 detection methods:"
        },
        {
          "name": "detect_voice_for_book",
          "doc": "Detect the most likely voice for a book (returns first candidate)"
        },
        {
          "name": "get_voice_from_json",
          "doc": "Extract voice information from JSON metadata"
        },
        {
          "name": "get_voice_from_log",
          "doc": "Extract voice information from run.log file"
        },
        {
          "name": "get_voices_from_filenames",
          "doc": "Extract voice names from existing audiobook filename patterns (may return multiple)"
        },
        {
          "name": "get_voice_from_filename",
          "doc": "Extract voice name from existing audiobook filename patterns (backwards compatibility)"
        },
        {
          "name": "find_voice_file_by_name",
          "doc": "Find voice file by name in Voice_Samples directory"
        },
        {
          "name": "add_voice_to_json",
          "doc": "Add voice information to JSON file"
        },
        {
          "name": "remove_voice_comment_from_json",
          "doc": "Remove voice comment from JSON file for clean processing"
        }
      ],
      "imports": [
        "re",
        "json",
        "pathlib",
        "config.config",
        "modules.file_manager"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "modules.vram_bandwidth_monitor": {
      "module_docstring": "VRAM Bandwidth Monitor for T3 Bottleneck Analysis",
      "classes": [
        {
          "name": "VRAMSnapshot",
          "doc": "",
          "methods": []
        },
        {
          "name": "VRAMBandwidthMonitor",
          "doc": "Monitor VRAM bandwidth and usage during TTS inference",
          "methods": [
            "start_monitoring",
            "stop_monitoring",
            "print_analysis"
          ]
        }
      ],
      "functions": [
        {
          "name": "start_vram_monitoring",
          "doc": "Start global VRAM monitoring"
        },
        {
          "name": "stop_vram_monitoring_and_analyze",
          "doc": "Stop monitoring and print analysis"
        },
        {
          "name": "monitor_t3_bandwidth",
          "doc": "Decorator to monitor VRAM bandwidth during T3 operations"
        },
        {
          "name": "start_monitoring",
          "doc": "Start continuous VRAM monitoring"
        },
        {
          "name": "stop_monitoring",
          "doc": "Stop monitoring and return analysis"
        },
        {
          "name": "print_analysis",
          "doc": "Print detailed bandwidth analysis"
        },
        {
          "name": "wrapper",
          "doc": ""
        },
        {
          "name": "monitor_loop",
          "doc": ""
        }
      ],
      "imports": [
        "subprocess",
        "threading",
        "time",
        "re",
        "typing",
        "dataclasses",
        "datetime"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "scripts.make_backup": {
      "module_docstring": "One\u2011click backup bundler",
      "classes": [],
      "functions": [
        {
          "name": "make_backup",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "add_path",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "datetime",
        "os",
        "pathlib",
        "zipfile"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": []
    },
    "src.chatterbox.__init__": {
      "module_docstring": "Chatterbox package init (kept minimal to avoid heavy side effects on import).",
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [
        ".tts",
        ".vc",
        ".text_utils"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.__init__": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [
        ".s3gen",
        ".const"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.const": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.decoder": {
      "module_docstring": null,
      "classes": [
        {
          "name": "Transpose",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "CausalBlock1D",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "CausalResnetBlock1D",
          "doc": "",
          "methods": []
        },
        {
          "name": "CausalConv1d",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "ConditionalDecoder",
          "doc": "",
          "methods": [
            "initialize_weights",
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "mask_to_bias",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "initialize_weights",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "Forward pass of the UNet1DConditional model."
        }
      ],
      "imports": [
        "torch",
        "torch.nn",
        "torch.nn.functional",
        "einops"
      ],
      "relative_imports": [
        ".utils.mask",
        ".matcha.decoder",
        ".matcha.transformer"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.f0_predictor": {
      "module_docstring": null,
      "classes": [
        {
          "name": "ConvRNNF0Predictor",
          "doc": "",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": ""
        }
      ],
      "imports": [
        "torch",
        "torch.nn",
        "torch.nn.utils.parametrizations"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.flow": {
      "module_docstring": null,
      "classes": [
        {
          "name": "MaskedDiffWithXvec",
          "doc": "",
          "methods": [
            "forward",
            "inference"
          ]
        },
        {
          "name": "CausalMaskedDiffWithXvec",
          "doc": "",
          "methods": [
            "inference"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "inference",
          "doc": ""
        },
        {
          "name": "inference",
          "doc": ""
        }
      ],
      "imports": [
        "logging",
        "random",
        "typing",
        "torch",
        "torch.nn",
        "torch.nn",
        "omegaconf"
      ],
      "relative_imports": [
        ".utils.mask"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.flow_matching": {
      "module_docstring": null,
      "classes": [
        {
          "name": "ConditionalCFM",
          "doc": "",
          "methods": [
            "forward",
            "solve_euler",
            "forward_estimator",
            "compute_loss"
          ]
        },
        {
          "name": "CausalConditionalCFM",
          "doc": "",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": "Forward diffusion"
        },
        {
          "name": "solve_euler",
          "doc": "Fixed euler solver for ODEs."
        },
        {
          "name": "forward_estimator",
          "doc": ""
        },
        {
          "name": "compute_loss",
          "doc": "Computes diffusion loss"
        },
        {
          "name": "forward",
          "doc": "Forward diffusion"
        }
      ],
      "imports": [
        "threading",
        "torch",
        "torch.nn.functional",
        "omegaconf"
      ],
      "relative_imports": [
        ".matcha.flow_matching"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.hifigan": {
      "module_docstring": "HIFI-GAN",
      "classes": [
        {
          "name": "Snake",
          "doc": "Implementation of a sine-based periodic activation function",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "ResBlock",
          "doc": "Residual block module in HiFiGAN/BigVGAN.",
          "methods": [
            "forward",
            "remove_weight_norm"
          ]
        },
        {
          "name": "SineGen",
          "doc": "Definition of sine generator",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "SourceModuleHnNSF",
          "doc": "SourceModule for hn-nsf",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "HiFTGenerator",
          "doc": "HiFTNet Generator: Neural Source Filter + ISTFTNet",
          "methods": [
            "remove_weight_norm",
            "decode",
            "forward",
            "inference"
          ]
        }
      ],
      "functions": [
        {
          "name": "get_padding",
          "doc": ""
        },
        {
          "name": "init_weights",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "Forward pass of the function."
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "remove_weight_norm",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ":param f0: [B, 1, sample_len], Hz"
        },
        {
          "name": "forward",
          "doc": "Sine_source, noise_source = SourceModuleHnNSF(F0_sampled)"
        },
        {
          "name": "remove_weight_norm",
          "doc": ""
        },
        {
          "name": "decode",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "inference",
          "doc": ""
        }
      ],
      "imports": [
        "typing",
        "numpy",
        "scipy.signal",
        "torch",
        "torch.nn.functional",
        "torch.nn",
        "torch.nn",
        "torch.nn.utils",
        "torch.nn.utils.parametrizations",
        "torch.distributions.uniform",
        "torch",
        "torch.nn"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.matcha.decoder": {
      "module_docstring": null,
      "classes": [
        {
          "name": "SinusoidalPosEmb",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Block1D",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "ResnetBlock1D",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Downsample1D",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "TimestepEmbedding",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Upsample1D",
          "doc": "A 1D upsampling layer with an optional convolution.",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "ConformerWrapper",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Decoder",
          "doc": "",
          "methods": [
            "get_block",
            "initialize_weights",
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "get_block",
          "doc": ""
        },
        {
          "name": "initialize_weights",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "Forward pass of the UNet1DConditional model."
        }
      ],
      "imports": [
        "math",
        "typing",
        "torch",
        "torch.nn",
        "torch.nn.functional",
        "conformer",
        "diffusers.models.activations",
        "einops"
      ],
      "relative_imports": [
        ".transformer"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.matcha.flow_matching": {
      "module_docstring": null,
      "classes": [
        {
          "name": "BASECFM",
          "doc": "",
          "methods": [
            "forward",
            "solve_euler",
            "compute_loss"
          ]
        },
        {
          "name": "CFM",
          "doc": "",
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": "Forward diffusion"
        },
        {
          "name": "solve_euler",
          "doc": "Fixed euler solver for ODEs."
        },
        {
          "name": "compute_loss",
          "doc": "Computes diffusion loss"
        }
      ],
      "imports": [
        "abc",
        "torch",
        "torch.nn.functional"
      ],
      "relative_imports": [
        ".decoder"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.matcha.text_encoder": {
      "module_docstring": "from https://github.com/jaywalnut310/glow-tts ",
      "classes": [
        {
          "name": "LayerNorm",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "ConvReluNorm",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "DurationPredictor",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "RotaryPositionalEmbeddings",
          "doc": "## RoPE module",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "MultiHeadAttention",
          "doc": "",
          "methods": [
            "forward",
            "attention"
          ]
        },
        {
          "name": "FFN",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Encoder",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "TextEncoder",
          "doc": "",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "sequence_mask",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "* `x` is the Tensor at the head of a key or a query with shape `[seq_len, batch_size, n_heads, d]`"
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "attention",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "Run forward pass to the transformer based encoder and duration predictor"
        }
      ],
      "imports": [
        "math",
        "torch",
        "torch.nn",
        "einops"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.matcha.transformer": {
      "module_docstring": null,
      "classes": [
        {
          "name": "SnakeBeta",
          "doc": "A modified Snake function which uses separate parameters for the magnitude of the periodic components",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "FeedForward",
          "doc": "A feed-forward layer.",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "BasicTransformerBlock",
          "doc": "A basic Transformer block.",
          "methods": [
            "set_chunk_feed_forward",
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": "Forward pass of the function."
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "set_chunk_feed_forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        }
      ],
      "imports": [
        "typing",
        "torch",
        "torch.nn",
        "diffusers.models.attention",
        "diffusers.models.attention_processor",
        "diffusers.models.lora",
        "diffusers.utils.torch_utils"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.s3gen": {
      "module_docstring": null,
      "classes": [
        {
          "name": "S3Token2Mel",
          "doc": "CosyVoice2's CFM decoder maps S3 speech tokens to mel-spectrograms.",
          "methods": [
            "device",
            "embed_ref",
            "forward"
          ]
        },
        {
          "name": "S3Token2Wav",
          "doc": "The decoder of CosyVoice2 is a concat of token-to-mel (CFM) and a mel-to-waveform (HiFiGAN) modules.",
          "methods": [
            "forward",
            "flow_inference",
            "hift_inference",
            "inference"
          ]
        }
      ],
      "functions": [
        {
          "name": "drop_invalid_tokens",
          "doc": ""
        },
        {
          "name": "get_resampler",
          "doc": ""
        },
        {
          "name": "device",
          "doc": ""
        },
        {
          "name": "embed_ref",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "Generate waveforms from S3 speech tokens and a reference waveform, which the speaker timbre is inferred from."
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "flow_inference",
          "doc": ""
        },
        {
          "name": "hift_inference",
          "doc": ""
        },
        {
          "name": "inference",
          "doc": ""
        }
      ],
      "imports": [
        "logging",
        "numpy",
        "torch",
        "torchaudio",
        "functools",
        "typing",
        "omegaconf"
      ],
      "relative_imports": [
        "..s3tokenizer",
        ".const",
        ".flow",
        ".xvector",
        ".utils.mel",
        ".f0_predictor",
        ".hifigan",
        ".transformer.upsample_encoder",
        ".flow_matching",
        ".decoder"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.transformer.__init__": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.transformer.activation": {
      "module_docstring": "Swish() activation function for Conformer.",
      "classes": [
        {
          "name": "Swish",
          "doc": "Construct an Swish object.",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Snake",
          "doc": "Implementation of a sine-based periodic activation function",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": "Return Swish activation function."
        },
        {
          "name": "forward",
          "doc": "Forward pass of the function."
        }
      ],
      "imports": [
        "torch",
        "torch",
        "torch.nn"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.transformer.attention": {
      "module_docstring": "Multi-Head Attention layer definition.",
      "classes": [
        {
          "name": "MultiHeadedAttention",
          "doc": "Multi-Head Attention layer.",
          "methods": [
            "forward_qkv",
            "forward_attention",
            "forward"
          ]
        },
        {
          "name": "RelPositionMultiHeadedAttention",
          "doc": "Multi-Head Attention layer with relative position encoding.",
          "methods": [
            "rel_shift",
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward_qkv",
          "doc": "Transform query, key and value."
        },
        {
          "name": "forward_attention",
          "doc": "Compute attention context vector."
        },
        {
          "name": "forward",
          "doc": "Compute scaled dot product attention."
        },
        {
          "name": "rel_shift",
          "doc": "Compute relative positional encoding."
        },
        {
          "name": "forward",
          "doc": "Compute 'Scaled Dot Product Attention' with rel. positional encoding."
        }
      ],
      "imports": [
        "math",
        "typing",
        "torch",
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.transformer.convolution": {
      "module_docstring": "ConvolutionModule definition.",
      "classes": [
        {
          "name": "ConvolutionModule",
          "doc": "ConvolutionModule in Conformer model.",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": "Compute convolution module."
        }
      ],
      "imports": [
        "typing",
        "torch",
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.transformer.embedding": {
      "module_docstring": "Positonal Encoding Module.",
      "classes": [
        {
          "name": "PositionalEncoding",
          "doc": "Positional encoding.",
          "methods": [
            "forward",
            "position_encoding"
          ]
        },
        {
          "name": "RelPositionalEncoding",
          "doc": "Relative positional encoding module.",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "WhisperPositionalEncoding",
          "doc": "Sinusoids position encoding used in openai-whisper.encoder",
          "methods": []
        },
        {
          "name": "LearnablePositionalEncoding",
          "doc": "Learnable position encoding used in openai-whisper.decoder",
          "methods": []
        },
        {
          "name": "NoPositionalEncoding",
          "doc": "No position encoding",
          "methods": [
            "forward",
            "position_encoding"
          ]
        },
        {
          "name": "EspnetRelPositionalEncoding",
          "doc": "Relative positional encoding module (new implementation).",
          "methods": [
            "extend_pe",
            "forward",
            "position_encoding"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": "Add positional encoding."
        },
        {
          "name": "position_encoding",
          "doc": "For getting encoding in a streaming fashion"
        },
        {
          "name": "forward",
          "doc": "Compute positional encoding."
        },
        {
          "name": "forward",
          "doc": "Just return zero vector for interface compatibility"
        },
        {
          "name": "position_encoding",
          "doc": ""
        },
        {
          "name": "extend_pe",
          "doc": "Reset the positional encodings."
        },
        {
          "name": "forward",
          "doc": "Add positional encoding."
        },
        {
          "name": "position_encoding",
          "doc": "For getting encoding in a streaming fashion"
        }
      ],
      "imports": [
        "math",
        "typing",
        "torch",
        "torch.nn.functional",
        "numpy"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.transformer.encoder_layer": {
      "module_docstring": "Encoder self-attention layer definition.",
      "classes": [
        {
          "name": "TransformerEncoderLayer",
          "doc": "Encoder layer module.",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "ConformerEncoderLayer",
          "doc": "Encoder layer module.",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": "Compute encoded features."
        },
        {
          "name": "forward",
          "doc": "Compute encoded features."
        }
      ],
      "imports": [
        "typing",
        "torch",
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.transformer.positionwise_feed_forward": {
      "module_docstring": "Positionwise feed forward layer definition.",
      "classes": [
        {
          "name": "PositionwiseFeedForward",
          "doc": "Positionwise feed forward layer.",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "MoEFFNLayer",
          "doc": "Mixture of expert with Positionwise feed forward layer",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": "Forward function."
        },
        {
          "name": "forward",
          "doc": "Foward function."
        }
      ],
      "imports": [
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.transformer.subsampling": {
      "module_docstring": "Subsampling layer definition.",
      "classes": [
        {
          "name": "BaseSubsampling",
          "doc": "",
          "methods": [
            "position_encoding"
          ]
        },
        {
          "name": "EmbedinigNoSubsampling",
          "doc": "Embedding input without subsampling",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "LinearNoSubsampling",
          "doc": "Linear transform the input without subsampling",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Conv1dSubsampling2",
          "doc": "Convolutional 1D subsampling (to 1/2 length).",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Conv2dSubsampling4",
          "doc": "Convolutional 2D subsampling (to 1/4 length).",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Conv2dSubsampling6",
          "doc": "Convolutional 2D subsampling (to 1/6 length).",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Conv2dSubsampling8",
          "doc": "Convolutional 2D subsampling (to 1/8 length).",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "LegacyLinearNoSubsampling",
          "doc": "Linear transform the input without subsampling",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "position_encoding",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "Input x."
        },
        {
          "name": "forward",
          "doc": "Input x."
        },
        {
          "name": "forward",
          "doc": "Subsample x."
        },
        {
          "name": "forward",
          "doc": "Subsample x."
        },
        {
          "name": "forward",
          "doc": "Subsample x."
        },
        {
          "name": "forward",
          "doc": "Subsample x."
        },
        {
          "name": "forward",
          "doc": "Input x."
        }
      ],
      "imports": [
        "typing",
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.transformer.upsample_encoder": {
      "module_docstring": "Encoder definition.",
      "classes": [
        {
          "name": "Upsample1D",
          "doc": "A 1D upsampling layer with an optional convolution.",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "PreLookaheadLayer",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "UpsampleConformerEncoder",
          "doc": "",
          "methods": [
            "output_size",
            "forward",
            "forward_layers",
            "forward_up_layers"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "inputs: (batch_size, seq_len, channels)"
        },
        {
          "name": "output_size",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "Embed positions in tensor."
        },
        {
          "name": "forward_layers",
          "doc": ""
        },
        {
          "name": "forward_up_layers",
          "doc": ""
        }
      ],
      "imports": [
        "typing",
        "torch",
        "torch",
        "torch.nn"
      ],
      "relative_imports": [
        ".convolution",
        ".encoder_layer",
        ".positionwise_feed_forward",
        "..utils.class_utils",
        "..utils.mask",
        "..utils.mask"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.utils.class_utils": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [
        "torch"
      ],
      "relative_imports": [
        "..transformer.activation",
        "..transformer.subsampling",
        "..transformer.embedding",
        "..transformer.attention",
        "..transformer.embedding",
        "..transformer.subsampling"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.utils.mask": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "subsequent_chunk_mask",
          "doc": "Create mask for subsequent steps (size, size) with chunk size,"
        },
        {
          "name": "add_optional_chunk_mask",
          "doc": "Apply optional mask for encoder."
        },
        {
          "name": "make_pad_mask",
          "doc": "Make mask tensor containing indices of padded part."
        }
      ],
      "imports": [
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.utils.mel": {
      "module_docstring": "mel-spectrogram extraction in Matcha-TTS",
      "classes": [],
      "functions": [
        {
          "name": "dynamic_range_compression_torch",
          "doc": ""
        },
        {
          "name": "spectral_normalize_torch",
          "doc": ""
        },
        {
          "name": "mel_spectrogram",
          "doc": "Copied from https://github.com/shivammehta25/Matcha-TTS/blob/main/matcha/utils/audio.py"
        }
      ],
      "imports": [
        "librosa.filters",
        "torch",
        "numpy"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3gen.xvector": {
      "module_docstring": null,
      "classes": [
        {
          "name": "BasicResBlock",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "FCM",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "StatsPool",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "TDNNLayer",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "CAMLayer",
          "doc": "",
          "methods": [
            "forward",
            "seg_pooling"
          ]
        },
        {
          "name": "CAMDenseTDNNLayer",
          "doc": "",
          "methods": [
            "bn_function",
            "forward"
          ]
        },
        {
          "name": "CAMDenseTDNNBlock",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "TransitLayer",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "DenseLayer",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "CAMPPlus",
          "doc": "",
          "methods": [
            "forward",
            "inference"
          ]
        }
      ],
      "functions": [
        {
          "name": "pad_list",
          "doc": "Perform padding for the list of tensors."
        },
        {
          "name": "extract_feature",
          "doc": ""
        },
        {
          "name": "get_nonlinear",
          "doc": ""
        },
        {
          "name": "statistics_pooling",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "seg_pooling",
          "doc": ""
        },
        {
          "name": "bn_function",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "inference",
          "doc": ""
        }
      ],
      "imports": [
        "collections",
        "torch",
        "torch.nn.functional",
        "torch.utils.checkpoint",
        "torchaudio.compliance.kaldi"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3tokenizer.__init__": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "drop_invalid_tokens",
          "doc": "Drop SoS and EoS"
        }
      ],
      "imports": [],
      "relative_imports": [
        ".s3tokenizer"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.s3tokenizer.s3tokenizer": {
      "module_docstring": null,
      "classes": [
        {
          "name": "S3Tokenizer",
          "doc": "s3tokenizer.S3TokenizerV2 with the following changes:",
          "methods": [
            "pad",
            "forward",
            "log_mel_spectrogram"
          ]
        }
      ],
      "functions": [
        {
          "name": "pad",
          "doc": "Given a list of wavs with the same `sample_rate`, pad them so that the length is multiple of 40ms (S3 runs at 25 token/sec)."
        },
        {
          "name": "forward",
          "doc": "NOTE: mel-spec has a hop size of 160 points (100 frame/sec)."
        },
        {
          "name": "log_mel_spectrogram",
          "doc": "Compute the log-Mel spectrogram of"
        }
      ],
      "imports": [
        "typing",
        "numpy",
        "librosa",
        "torch",
        "torch.nn.functional",
        "s3tokenizer.utils",
        "s3tokenizer.model_v2"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.t3.__init__": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [
        ".t3"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.t3.inference.alignment_stream_analyzer": {
      "module_docstring": null,
      "classes": [
        {
          "name": "AlignmentAnalysisResult",
          "doc": "",
          "methods": []
        },
        {
          "name": "AlignmentStreamAnalyzer",
          "doc": "",
          "methods": [
            "step",
            "close"
          ]
        }
      ],
      "functions": [
        {
          "name": "step",
          "doc": "Emits an AlignmentAnalysisResult into the output queue, and potentially modifies the logits to force an EOS."
        },
        {
          "name": "close",
          "doc": "Remove hooks and restore original forward to prevent accumulation across generations."
        },
        {
          "name": "attention_forward_hook",
          "doc": "See `LlamaAttention.forward`; the output is a 3-tuple: `attn_output, attn_weights, past_key_value`."
        },
        {
          "name": "patched_forward",
          "doc": ""
        }
      ],
      "imports": [
        "logging",
        "torch",
        "dataclasses",
        "types"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.t3.inference.t3_hf_backend": {
      "module_docstring": null,
      "classes": [
        {
          "name": "T3HuggingfaceBackend",
          "doc": "Override some HuggingFace interface methods so we can use the standard `generate` method with our",
          "methods": [
            "prepare_inputs_for_generation",
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "prepare_inputs_for_generation",
          "doc": "This is a method used by huggingface's generate() method."
        },
        {
          "name": "forward",
          "doc": "This is a method used by huggingface's generate() method."
        }
      ],
      "imports": [
        "typing",
        "torch",
        "torch",
        "transformers",
        "transformers.modeling_outputs"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.t3.llama_configs": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.t3.modules.cond_enc": {
      "module_docstring": null,
      "classes": [
        {
          "name": "T3Cond",
          "doc": "Dataclass container for most / all conditioning info.",
          "methods": [
            "to",
            "save",
            "load"
          ]
        },
        {
          "name": "T3CondEnc",
          "doc": "Handle all non-text conditioning, like speaker embeddings / prompts, CLAP, emotion, etc.",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "to",
          "doc": "Cast to a device and dtype. Dtype casting is ignored for long/int tensors."
        },
        {
          "name": "save",
          "doc": ""
        },
        {
          "name": "load",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        }
      ],
      "imports": [
        "dataclasses",
        "typing",
        "torch",
        "torch"
      ],
      "relative_imports": [
        ".perceiver",
        ".t3_config"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.t3.modules.learned_pos_emb": {
      "module_docstring": null,
      "classes": [
        {
          "name": "LearnedPositionEmbeddings",
          "doc": "",
          "methods": [
            "forward",
            "get_fixed_embedding"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": "Returns positional embeddings for index 0 up to the length of x"
        },
        {
          "name": "get_fixed_embedding",
          "doc": "Args:"
        }
      ],
      "imports": [
        "typing",
        "torch",
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.t3.modules.perceiver": {
      "module_docstring": null,
      "classes": [
        {
          "name": "RelativePositionBias",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "AttentionQKV",
          "doc": "",
          "methods": [
            "setup_flash_config",
            "forward",
            "scaled_dot_product_attention",
            "flash_attention",
            "split_heads",
            "combine_heads"
          ]
        },
        {
          "name": "AttentionBlock2",
          "doc": "An attention block that allows spatial positions to attend to each other,",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "Perceiver",
          "doc": "Inspired by https://arxiv.org/abs/2103.03206",
          "methods": [
            "forward"
          ]
        }
      ],
      "functions": [
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "setup_flash_config",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "scaled_dot_product_attention",
          "doc": ""
        },
        {
          "name": "flash_attention",
          "doc": ""
        },
        {
          "name": "split_heads",
          "doc": ""
        },
        {
          "name": "combine_heads",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "Forward pass of the perceiver module."
        }
      ],
      "imports": [
        "math",
        "torch",
        "torch",
        "torch.nn.functional",
        "einops"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.t3.modules.t3_config": {
      "module_docstring": null,
      "classes": [
        {
          "name": "T3Config",
          "doc": "",
          "methods": [
            "n_channels"
          ]
        }
      ],
      "functions": [
        {
          "name": "n_channels",
          "doc": ""
        }
      ],
      "imports": [],
      "relative_imports": [
        "..llama_configs"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.t3.t3": {
      "module_docstring": null,
      "classes": [
        {
          "name": "AttrDict",
          "doc": "",
          "methods": []
        },
        {
          "name": "T3",
          "doc": "Token-To-Token (T3) TTS model using huggingface transformer models as backbones,",
          "methods": [
            "device",
            "prepare_conditioning",
            "prepare_input_embeds",
            "forward",
            "loss",
            "inference"
          ]
        }
      ],
      "functions": [
        {
          "name": "device",
          "doc": ""
        },
        {
          "name": "prepare_conditioning",
          "doc": "Token cond data needs to be embedded, so that needs to be here instead of in `T3CondEnc`."
        },
        {
          "name": "prepare_input_embeds",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "loss",
          "doc": "training method"
        },
        {
          "name": "inference",
          "doc": "Args:"
        }
      ],
      "imports": [
        "logging",
        "typing",
        "tqdm",
        "os",
        "torch",
        "torch.nn.functional",
        "torch",
        "transformers",
        "transformers.generation.logits_process"
      ],
      "relative_imports": [
        ".modules.learned_pos_emb",
        ".modules.cond_enc",
        ".modules.t3_config",
        ".llama_configs",
        ".inference.t3_hf_backend",
        ".inference.alignment_stream_analyzer"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.tokenizers.__init__": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [
        ".tokenizer"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.tokenizers.tokenizer": {
      "module_docstring": null,
      "classes": [
        {
          "name": "EnTokenizer",
          "doc": "",
          "methods": [
            "check_vocabset_sot_eot",
            "text_to_tokens",
            "encode",
            "decode"
          ]
        }
      ],
      "functions": [
        {
          "name": "check_vocabset_sot_eot",
          "doc": ""
        },
        {
          "name": "text_to_tokens",
          "doc": ""
        },
        {
          "name": "encode",
          "doc": "clean_text > (append `lang_id`) > replace SPACE > encode text using Tokenizer"
        },
        {
          "name": "decode",
          "doc": ""
        }
      ],
      "imports": [
        "logging",
        "torch",
        "tokenizers"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.voice_encoder.__init__": {
      "module_docstring": null,
      "classes": [],
      "functions": [],
      "imports": [],
      "relative_imports": [
        ".voice_encoder"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.voice_encoder.config": {
      "module_docstring": null,
      "classes": [
        {
          "name": "VoiceEncConfig",
          "doc": "",
          "methods": []
        }
      ],
      "functions": [],
      "imports": [],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.voice_encoder.melspec": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "mel_basis",
          "doc": ""
        },
        {
          "name": "preemphasis",
          "doc": ""
        },
        {
          "name": "melspectrogram",
          "doc": ""
        }
      ],
      "imports": [
        "functools",
        "scipy",
        "numpy",
        "librosa"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.models.voice_encoder.voice_encoder": {
      "module_docstring": null,
      "classes": [
        {
          "name": "VoiceEncoder",
          "doc": "",
          "methods": [
            "device",
            "forward",
            "inference",
            "utt_to_spk_embed",
            "voice_similarity",
            "embeds_from_mels",
            "embeds_from_wavs"
          ]
        }
      ],
      "functions": [
        {
          "name": "pack",
          "doc": "Given a list of length B of array-like objects of shapes (Ti, ...), packs them in a single tensor of"
        },
        {
          "name": "get_num_wins",
          "doc": ""
        },
        {
          "name": "get_frame_step",
          "doc": ""
        },
        {
          "name": "stride_as_partials",
          "doc": "Takes unscaled mels in (T, M) format"
        },
        {
          "name": "device",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": "Computes the embeddings of a batch of partial utterances."
        },
        {
          "name": "inference",
          "doc": "Computes the embeddings of a batch of full utterances with gradients."
        },
        {
          "name": "utt_to_spk_embed",
          "doc": "Takes an array of L2-normalized utterance embeddings, computes the mean embedding and L2-normalize it to get a"
        },
        {
          "name": "voice_similarity",
          "doc": "Cosine similarity for L2-normalized utterance embeddings or speaker embeddings"
        },
        {
          "name": "embeds_from_mels",
          "doc": "Convenience function for deriving utterance or speaker embeddings from mel spectrograms."
        },
        {
          "name": "embeds_from_wavs",
          "doc": "Wrapper around embeds_from_mels"
        }
      ],
      "imports": [
        "typing",
        "numpy",
        "numpy.lib.stride_tricks",
        "librosa",
        "torch",
        "torch.nn.functional",
        "torch"
      ],
      "relative_imports": [
        ".config",
        ".melspec"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.text_utils": {
      "module_docstring": "Text processing utility functions",
      "classes": [],
      "functions": [
        {
          "name": "detect_language",
          "doc": "Simple language detection based on character patterns"
        },
        {
          "name": "get_sentence_separators",
          "doc": "Get sentence separator pattern for different languages"
        },
        {
          "name": "get_punctuation_pattern",
          "doc": "Get punctuation pattern for word boundary splitting"
        },
        {
          "name": "split_by_word_boundary",
          "doc": "Split text by word boundaries to ensure words are not broken in the middle"
        },
        {
          "name": "merge_short_sentences",
          "doc": "Merge short sentences to the next sentence, ensuring not to exceed maximum length limit"
        },
        {
          "name": "split_text_into_segments",
          "doc": "Split text into segments suitable for TTS processing"
        }
      ],
      "imports": [
        "re",
        "typing",
        "logging"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "src.chatterbox.tts": {
      "module_docstring": null,
      "classes": [
        {
          "name": "Conditionals",
          "doc": "Conditionals for T3 and S3Gen",
          "methods": [
            "to",
            "save",
            "load"
          ]
        },
        {
          "name": "ChatterboxTTS",
          "doc": "",
          "methods": [
            "from_local",
            "from_pretrained",
            "prepare_conditionals",
            "generate",
            "generate_batch"
          ]
        }
      ],
      "functions": [
        {
          "name": "punc_norm",
          "doc": "Quick cleanup func for punctuation from LLMs or"
        },
        {
          "name": "parse_pause_tags",
          "doc": "Parse pause tags in text and return text segments with corresponding pause durations"
        },
        {
          "name": "create_silence",
          "doc": "Create silence of specified duration"
        },
        {
          "name": "to",
          "doc": ""
        },
        {
          "name": "save",
          "doc": ""
        },
        {
          "name": "load",
          "doc": ""
        },
        {
          "name": "from_local",
          "doc": ""
        },
        {
          "name": "from_pretrained",
          "doc": ""
        },
        {
          "name": "prepare_conditionals",
          "doc": ""
        },
        {
          "name": "generate",
          "doc": ""
        },
        {
          "name": "generate_batch",
          "doc": "Batch generation for multiple texts sharing the same params/voice."
        },
        {
          "name": "generate_worker",
          "doc": ""
        }
      ],
      "imports": [
        "dataclasses",
        "pathlib",
        "tempfile",
        "subprocess",
        "os",
        "threading",
        "queue",
        "concurrent.futures",
        "librosa",
        "torch",
        "perth",
        "torch.nn.functional",
        "huggingface_hub",
        "safetensors.torch",
        "re",
        "config.config",
        "numpy",
        "torchaudio",
        "os",
        "subprocess",
        "tempfile",
        "os",
        "tempfile",
        "tempfile",
        "tempfile"
      ],
      "relative_imports": [
        ".models.t3",
        ".models.s3tokenizer",
        ".models.s3gen",
        ".models.tokenizers",
        ".models.voice_encoder",
        ".models.t3.modules.cond_enc",
        ".text_utils"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "src.chatterbox.vc": {
      "module_docstring": null,
      "classes": [
        {
          "name": "ChatterboxVC",
          "doc": "",
          "methods": [
            "from_local",
            "from_pretrained",
            "set_target_voice",
            "generate"
          ]
        }
      ],
      "functions": [
        {
          "name": "from_local",
          "doc": ""
        },
        {
          "name": "from_pretrained",
          "doc": ""
        },
        {
          "name": "set_target_voice",
          "doc": ""
        },
        {
          "name": "generate",
          "doc": ""
        }
      ],
      "imports": [
        "pathlib",
        "librosa",
        "torch",
        "perth",
        "huggingface_hub",
        "safetensors.torch"
      ],
      "relative_imports": [
        ".models.s3tokenizer",
        ".models.s3gen"
      ],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "start": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "prompt_menu",
          "doc": ""
        },
        {
          "name": "wrapper_main",
          "doc": ""
        }
      ],
      "imports": [
        "main_launcher",
        "wrapper.chunk_tool",
        "modules.text_processor"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.analyze_attention_implementation": {
      "module_docstring": "Attention Implementation Analyzer",
      "classes": [],
      "functions": [
        {
          "name": "check_flash_attention_availability",
          "doc": "Check if Flash Attention is available"
        },
        {
          "name": "analyze_current_attention_config",
          "doc": "Analyze the current attention configuration in T3"
        },
        {
          "name": "benchmark_attention_implementations",
          "doc": "Benchmark different attention implementations"
        },
        {
          "name": "create_attention_optimization_plan",
          "doc": "Create optimization plan based on analysis"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "json",
        "torch",
        "gc",
        "modules.tts_engine",
        "flash_attn",
        "transformers",
        "flash_attn",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.analyze_book_json_for_batching": {
      "module_docstring": "Book JSON Batching Analyzer",
      "classes": [
        {
          "name": "ChunkInfo",
          "doc": "Information about a single text chunk",
          "methods": []
        },
        {
          "name": "BatchGroup",
          "doc": "Group of chunks with identical TTS parameters",
          "methods": []
        }
      ],
      "functions": [
        {
          "name": "parse_book_json",
          "doc": "Parse book JSON file and extract chunk information"
        },
        {
          "name": "group_chunks_by_tts_params",
          "doc": "Group chunks by identical TTS parameters"
        },
        {
          "name": "calculate_batch_benefit",
          "doc": "Calculate potential benefit score for batching this group"
        },
        {
          "name": "analyze_batching_potential",
          "doc": "Analyze the overall batching potential"
        },
        {
          "name": "print_analysis_report",
          "doc": "Print detailed analysis report"
        },
        {
          "name": "create_batching_plan",
          "doc": "Create concrete batching implementation plan"
        },
        {
          "name": "save_analysis_results",
          "doc": "Save analysis results to file"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "json",
        "time",
        "pathlib",
        "collections",
        "dataclasses",
        "typing",
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "sys_exit"
      ]
    },
    "tools.audio_emotion_scanner": {
      "module_docstring": "Audio Emotion Scanner for ChatterboxTTS",
      "classes": [
        {
          "name": "TranscriptSegment",
          "doc": "Represents a segment of transcribed audio with timestamps.",
          "methods": []
        },
        {
          "name": "EmotionalSegment",
          "doc": "Represents an audio segment with emotional analysis.",
          "methods": []
        },
        {
          "name": "AudioEmotionScanner",
          "doc": "Main class for scanning audio files for emotional content.",
          "methods": [
            "load_whisper_model",
            "chunk_audio",
            "transcribe_chunk",
            "classify_speech_pattern",
            "classify_emotion",
            "analyze_transcript_segments",
            "extract_audio_segment",
            "scan_audio_file",
            "save_analysis_results",
            "extract_best_segments"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "load_whisper_model",
          "doc": "Load Whisper model with VRAM optimization."
        },
        {
          "name": "chunk_audio",
          "doc": "Split long audio into overlapping chunks for processing."
        },
        {
          "name": "transcribe_chunk",
          "doc": "Transcribe a single audio chunk with word-level timestamps."
        },
        {
          "name": "classify_speech_pattern",
          "doc": "Classify the speech pattern of a text segment."
        },
        {
          "name": "classify_emotion",
          "doc": "Classify VADER sentiment score into emotional categories."
        },
        {
          "name": "analyze_transcript_segments",
          "doc": "Analyze transcript segments for emotional content."
        },
        {
          "name": "extract_audio_segment",
          "doc": "Extract a specific audio segment from the original file."
        },
        {
          "name": "scan_audio_file",
          "doc": "Scan entire audio file for emotional segments."
        },
        {
          "name": "save_analysis_results",
          "doc": "Save analysis results to JSON and text files."
        },
        {
          "name": "extract_best_segments",
          "doc": "Extract the best audio segments for each emotion."
        }
      ],
      "imports": [
        "json",
        "os",
        "sys",
        "whisper",
        "torch",
        "librosa",
        "soundfile",
        "numpy",
        "pathlib",
        "typing",
        "dataclasses",
        "argparse",
        "re",
        "vaderSentiment.vaderSentiment",
        "gc",
        "collections",
        "logging"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": [
        "sys_exit"
      ]
    },
    "tools.combine_only": {
      "module_docstring": "Combine Only Tool",
      "classes": [],
      "functions": [
        {
          "name": "combine_audio_for_book",
          "doc": "Combine audio chunks for a specific book (GUI-friendly version)"
        },
        {
          "name": "run_combine_only_mode",
          "doc": "Combine existing chunks into audiobook (CLI version)"
        },
        {
          "name": "verify_chunk_sequence",
          "doc": "Verify chunk sequence and return missing chunk numbers"
        },
        {
          "name": "list_available_books_for_combine",
          "doc": "List books available for combine operation"
        },
        {
          "name": "quick_combine",
          "doc": "Quick combine operation for specific book (CLI usage)"
        }
      ],
      "imports": [
        "re",
        "time",
        "logging",
        "datetime",
        "pathlib",
        "config.config",
        "modules.file_manager",
        "modules.audio_processor",
        "modules.progress_tracker",
        "subprocess",
        "shutil",
        "pathlib",
        "time",
        "datetime",
        "sys"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.config_audit": {
      "module_docstring": "Config Audit: map config flags to usage sites to find unused toggles.",
      "classes": [],
      "functions": [
        {
          "name": "extract_flags",
          "doc": ""
        },
        {
          "name": "scan_usage",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "ast",
        "json",
        "pathlib",
        "typing"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.cuda_kernel_profiler": {
      "module_docstring": "CUDA Kernel Utilization Profiler and Optimizer",
      "classes": [
        {
          "name": "CudaUtilizationSnapshot",
          "doc": "Single GPU utilization measurement",
          "methods": []
        },
        {
          "name": "KernelProfilingResult",
          "doc": "Results from kernel profiling session",
          "methods": []
        },
        {
          "name": "CudaKernelProfiler",
          "doc": "Main CUDA kernel profiling and optimization tool",
          "methods": [
            "start_monitoring",
            "stop_monitoring",
            "analyze_utilization",
            "profile_inference_workload",
            "generate_optimization_recommendations",
            "run_comprehensive_profile",
            "save_profile_results",
            "print_summary"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "start_monitoring",
          "doc": "Start GPU utilization monitoring"
        },
        {
          "name": "stop_monitoring",
          "doc": "Stop monitoring and return collected data"
        },
        {
          "name": "analyze_utilization",
          "doc": "Analyze GPU utilization patterns"
        },
        {
          "name": "profile_inference_workload",
          "doc": "Profile GPU utilization during a single inference"
        },
        {
          "name": "generate_optimization_recommendations",
          "doc": "Generate optimization recommendations based on profiling results"
        },
        {
          "name": "run_comprehensive_profile",
          "doc": "Run comprehensive CUDA kernel profiling"
        },
        {
          "name": "save_profile_results",
          "doc": "Save profiling results to file"
        },
        {
          "name": "print_summary",
          "doc": "Print profiling summary"
        }
      ],
      "imports": [
        "argparse",
        "sys",
        "time",
        "json",
        "subprocess",
        "threading",
        "os",
        "pathlib",
        "typing",
        "dataclasses",
        "signal",
        "torch",
        "psutil",
        "gc",
        "config.config",
        "modules.tts_engine",
        "modules.file_manager",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "tools.emotion_extractor": {
      "module_docstring": "Emotion Extractor for ChatterboxTTS",
      "classes": [
        {
          "name": "EmotionalSegment",
          "doc": "Represents an audio segment with its emotional characteristics.",
          "methods": []
        },
        {
          "name": "EmotionExtractor",
          "doc": "Main class for extracting emotional voice samples from TTS output.",
          "methods": [
            "classify_emotion",
            "load_chunk_data",
            "analyze_audio_quality",
            "select_best_segments",
            "combine_emotional_samples",
            "generate_sample_report"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "classify_emotion",
          "doc": "Classify VADER sentiment score into discrete emotional states."
        },
        {
          "name": "load_chunk_data",
          "doc": "Load and parse chunk data from JSON file."
        },
        {
          "name": "analyze_audio_quality",
          "doc": "Analyze audio quality and return a score (0-1, higher is better)."
        },
        {
          "name": "select_best_segments",
          "doc": "Select the best segments for each emotional state."
        },
        {
          "name": "combine_emotional_samples",
          "doc": "Combine segments into 10-second emotional voice samples."
        },
        {
          "name": "generate_sample_report",
          "doc": "Generate a detailed report of the extraction process."
        },
        {
          "name": "score_segment",
          "doc": ""
        }
      ],
      "imports": [
        "json",
        "os",
        "sys",
        "librosa",
        "soundfile",
        "numpy",
        "pathlib",
        "typing",
        "dataclasses",
        "collections",
        "argparse"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": [
        "sys_exit"
      ]
    },
    "tools.emotional_audio_enhancer": {
      "module_docstring": "Emotional Audio Enhancer for ChatterboxTTS",
      "classes": [
        {
          "name": "EmotionalAudioEnhancer",
          "doc": "",
          "methods": [
            "setup_ui",
            "create_tooltip",
            "select_input_file",
            "select_output_file",
            "update_emotion_presets",
            "check_audio_tools",
            "start_processing",
            "process_audio",
            "apply_pitch_shift",
            "apply_formant_shift",
            "apply_compression",
            "apply_eq",
            "apply_tempo_change",
            "apply_reverb",
            "apply_tremolo",
            "apply_vibrato",
            "update_status",
            "cleanup_temp_files",
            "preview_audio",
            "reset_settings",
            "save_preset",
            "load_preset"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "doc": "Main entry point."
        },
        {
          "name": "setup_ui",
          "doc": "Create the main user interface."
        },
        {
          "name": "create_tooltip",
          "doc": "Create a simple tooltip for a widget."
        },
        {
          "name": "select_input_file",
          "doc": "Open file picker for input audio file."
        },
        {
          "name": "select_output_file",
          "doc": "Open file picker for output audio file."
        },
        {
          "name": "update_emotion_presets",
          "doc": "Update enhancement settings based on selected emotion."
        },
        {
          "name": "check_audio_tools",
          "doc": "Check if required audio processing tools are available."
        },
        {
          "name": "start_processing",
          "doc": "Start audio processing in a separate thread."
        },
        {
          "name": "process_audio",
          "doc": "Process the audio file with selected enhancements."
        },
        {
          "name": "apply_pitch_shift",
          "doc": "Apply pitch shifting using sox."
        },
        {
          "name": "apply_formant_shift",
          "doc": "Apply formant shifting using sox bend effect."
        },
        {
          "name": "apply_compression",
          "doc": "Apply dynamic range compression."
        },
        {
          "name": "apply_eq",
          "doc": "Apply EQ/harmonic emphasis."
        },
        {
          "name": "apply_tempo_change",
          "doc": "Apply tempo change."
        },
        {
          "name": "apply_reverb",
          "doc": "Apply reverb effect."
        },
        {
          "name": "apply_tremolo",
          "doc": "Apply tremolo effect."
        },
        {
          "name": "apply_vibrato",
          "doc": "Apply vibrato effect."
        },
        {
          "name": "update_status",
          "doc": "Update status label in thread-safe way."
        },
        {
          "name": "cleanup_temp_files",
          "doc": "Clean up temporary files."
        },
        {
          "name": "preview_audio",
          "doc": "Preview the processed audio (if tools available)."
        },
        {
          "name": "reset_settings",
          "doc": "Reset all settings to defaults."
        },
        {
          "name": "save_preset",
          "doc": "Save current settings as a preset."
        },
        {
          "name": "load_preset",
          "doc": "Load settings from a preset file."
        },
        {
          "name": "on_closing",
          "doc": ""
        },
        {
          "name": "on_enter",
          "doc": ""
        },
        {
          "name": "on_leave",
          "doc": ""
        },
        {
          "name": "update_display",
          "doc": ""
        }
      ],
      "imports": [
        "tkinter",
        "tkinter",
        "subprocess",
        "os",
        "threading",
        "pathlib",
        "tempfile",
        "shutil",
        "json",
        "typing",
        "logging"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "tools.exporters.t3_fx_export": {
      "module_docstring": "Phase 1: FX trace + operator inventory for one T3 decoder block.",
      "classes": [
        {
          "name": "BlockWrapper",
          "doc": "",
          "methods": [
            "forward"
          ]
        },
        {
          "name": "RoPETracer",
          "doc": "",
          "methods": [
            "is_leaf_module"
          ]
        }
      ],
      "functions": [
        {
          "name": "trace_block",
          "doc": ""
        },
        {
          "name": "op_histogram",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "forward",
          "doc": ""
        },
        {
          "name": "is_leaf_module",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "json",
        "os",
        "pathlib",
        "typing",
        "torch",
        "torch.fx",
        "sys",
        "safetensors.torch",
        "src.chatterbox.models.t3",
        "config.config",
        "src.chatterbox.models.t3.llama_configs"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": []
    },
    "tools.feature_run_logger": {
      "module_docstring": "Feature Run Logger: instrument GUI action slots to log actual UI values at press time.",
      "classes": [],
      "functions": [
        {
          "name": "parse_input_expr",
          "doc": "Parse 'self.widget.sub.value()' into (attr_chain:list[str], getter:str)."
        },
        {
          "name": "get_input_value",
          "doc": ""
        },
        {
          "name": "instrument_window",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "wrapped_init",
          "doc": ""
        },
        {
          "name": "make_wrapper",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "json",
        "time",
        "pathlib",
        "types",
        "sys",
        "threading",
        "importlib",
        "PyQt5.QtWidgets",
        "PyQt5",
        "sys",
        "threading",
        "time",
        "json",
        "PyQt5.QtWidgets",
        "json"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.feature_spider": {
      "module_docstring": "Feature Spider: Static repo explorer for Chatterbox",
      "classes": [],
      "functions": [
        {
          "name": "rel",
          "doc": ""
        },
        {
          "name": "list_py_files",
          "doc": ""
        },
        {
          "name": "module_to_path",
          "doc": "Resolve a dotted module name to a file within the repo, if present."
        },
        {
          "name": "resolve_import",
          "doc": ""
        },
        {
          "name": "build_import_graph",
          "doc": ""
        },
        {
          "name": "to_dot",
          "doc": ""
        },
        {
          "name": "parse_gui_connections",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "ast",
        "argparse",
        "json",
        "os",
        "pathlib",
        "typing",
        "re"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": []
    },
    "tools.generate_from_json": {
      "module_docstring": "ChatterboxTTS JSON-Based Audio Generation Utility",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "doc": "Main function to drive the generation process."
        }
      ],
      "imports": [
        "torch",
        "pathlib",
        "sys",
        "concurrent.futures",
        "time",
        "datetime",
        "config.config",
        "modules.tts_engine",
        "modules.file_manager",
        "wrapper.chunk_loader",
        "chatterbox.tts",
        "modules.progress_tracker",
        "modules.tts_engine"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.gui_static_map": {
      "module_docstring": "GUI Static Map: Analyze chatterbox_gui.py to map buttons \u2192 slots \u2192 inputs \u2192 external calls.",
      "classes": [
        {
          "name": "GUISpy",
          "doc": "",
          "methods": [
            "visit_Assign",
            "visit_Call",
            "visit_FunctionDef"
          ]
        },
        {
          "name": "SlotAnalyzer",
          "doc": "",
          "methods": [
            "visit_Call",
            "generic_visit"
          ]
        }
      ],
      "functions": [
        {
          "name": "qualname_from_attr",
          "doc": ""
        },
        {
          "name": "build_feature_map",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "visit_Assign",
          "doc": ""
        },
        {
          "name": "visit_Call",
          "doc": ""
        },
        {
          "name": "visit_FunctionDef",
          "doc": ""
        },
        {
          "name": "visit_Call",
          "doc": ""
        },
        {
          "name": "generic_visit",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "ast",
        "json",
        "pathlib",
        "typing"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.gui_walker": {
      "module_docstring": "GUI Walker: enumerates and clicks GUI actions under SPIDER_DRY_RUN=1.",
      "classes": [
        {
          "name": "_PkgStubLoader",
          "doc": "",
          "methods": [
            "create_module",
            "exec_module"
          ]
        },
        {
          "name": "_PkgStubFinder",
          "doc": "",
          "methods": [
            "find_spec"
          ]
        },
        {
          "name": "_SIA",
          "doc": "",
          "methods": [
            "polarity_scores"
          ]
        }
      ],
      "functions": [
        {
          "name": "log",
          "doc": ""
        },
        {
          "name": "save_log",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "create_module",
          "doc": ""
        },
        {
          "name": "exec_module",
          "doc": ""
        },
        {
          "name": "find_spec",
          "doc": ""
        },
        {
          "name": "polarity_scores",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "os",
        "sys",
        "time",
        "pathlib",
        "PyQt5.QtWidgets",
        "PyQt5",
        "PyQt5.QtTest",
        "importlib",
        "types",
        "importlib.machinery",
        "PyQt5.QtWidgets"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.headless_performance_test": {
      "module_docstring": "Headless Performance Testing Framework for Chatterbox TTS",
      "classes": [
        {
          "name": "PerformanceResult",
          "doc": "Single performance measurement result",
          "methods": []
        },
        {
          "name": "HeadlessPerformanceTester",
          "doc": "Main performance testing framework",
          "methods": [
            "test_torch_compile_configurations",
            "test_batching_configurations",
            "test_memory_optimizations",
            "run_full_test_suite",
            "save_results",
            "print_summary"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "test_torch_compile_configurations",
          "doc": "Test different torch.compile configurations"
        },
        {
          "name": "test_batching_configurations",
          "doc": "Test different batching configurations"
        },
        {
          "name": "test_memory_optimizations",
          "doc": "Test memory layout and optimization configurations"
        },
        {
          "name": "run_full_test_suite",
          "doc": "Run comprehensive performance test suite"
        },
        {
          "name": "save_results",
          "doc": "Save test results to file"
        },
        {
          "name": "print_summary",
          "doc": "Print a summary of results"
        }
      ],
      "imports": [
        "argparse",
        "sys",
        "time",
        "json",
        "logging",
        "pathlib",
        "typing",
        "dataclasses",
        "subprocess",
        "os",
        "torch",
        "psutil",
        "gc",
        "config.config",
        "modules.tts_engine",
        "modules.file_manager",
        "modules.terminal_logger",
        "src.chatterbox.tts",
        "modules.tts_engine"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": [
        "env_reads"
      ]
    },
    "tools.measure_token_memory": {
      "module_docstring": "Speech Token Memory Footprint Analysis",
      "classes": [],
      "functions": [
        {
          "name": "get_memory_usage",
          "doc": "Get current memory usage"
        },
        {
          "name": "measure_tensor_size",
          "doc": "Measure actual tensor memory footprint"
        },
        {
          "name": "generate_test_tokens",
          "doc": "Generate speech tokens and measure memory usage"
        },
        {
          "name": "analyze_queue_capacity",
          "doc": "Analyze how many sequences can fit in system RAM"
        },
        {
          "name": "simulate_queue_transfer_overhead",
          "doc": "Simulate CPU \u2194 GPU transfer overhead for queue operations"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "os",
        "pathlib",
        "json",
        "gc",
        "psutil",
        "torch",
        "numpy",
        "modules.tts_engine",
        "modules.file_manager",
        "src.chatterbox.tts"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.ort_gpu_diagnose": {
      "module_docstring": "ORT/Torch GPU environment diagnostic.",
      "classes": [],
      "functions": [
        {
          "name": "print_header",
          "doc": ""
        },
        {
          "name": "find_shadowing_modules",
          "doc": ""
        },
        {
          "name": "show_python_env",
          "doc": ""
        },
        {
          "name": "show_shadowing",
          "doc": ""
        },
        {
          "name": "try_import_onnxruntime",
          "doc": ""
        },
        {
          "name": "try_torch_cuda",
          "doc": ""
        },
        {
          "name": "try_nvidia_smi",
          "doc": ""
        },
        {
          "name": "maybe_run_onnx_test",
          "doc": ""
        },
        {
          "name": "print_next_steps_hint",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "importlib",
        "importlib.util",
        "os",
        "sys",
        "textwrap",
        "typing",
        "site",
        "shutil",
        "subprocess",
        "subprocess",
        "onnxruntime",
        "torch"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "tools.path_checker": {
      "module_docstring": "Path Checker Tool",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "pathlib",
        "modules.path_validator",
        "config.config"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.quick_batching_test": {
      "module_docstring": "Quick Batching Test",
      "classes": [],
      "functions": [
        {
          "name": "quick_batch_test",
          "doc": ""
        },
        {
          "name": "tokenize_single",
          "doc": ""
        },
        {
          "name": "tokenize_batch",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "json",
        "pathlib",
        "torch",
        "gc",
        "modules.tts_engine"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.run_tts_once": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "parse_args",
          "doc": ""
        },
        {
          "name": "set_trt_env",
          "doc": ""
        },
        {
          "name": "default_texts",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "argparse",
        "json",
        "os",
        "sys",
        "time",
        "pathlib",
        "torch",
        "modules.tts_engine"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": [
        "env_reads",
        "sys_exit"
      ]
    },
    "tools.runtime_summarize": {
      "module_docstring": "Summarize runtime trace produced by sitecustomize tracer.",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "json",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.safe_archiver": {
      "module_docstring": "Safe Archiver: move dead-code candidates to archive/ with a manifest.",
      "classes": [],
      "functions": [
        {
          "name": "load_candidates",
          "doc": ""
        },
        {
          "name": "load_reached",
          "doc": ""
        },
        {
          "name": "apply",
          "doc": ""
        },
        {
          "name": "restore",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "json",
        "shutil",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": []
    },
    "tools.spider_ci": {
      "module_docstring": "Spider CI Check: run feature spider and simple assertions.",
      "classes": [],
      "functions": [
        {
          "name": "load_graph",
          "doc": ""
        },
        {
          "name": "detect_cycles",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "dfs",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "json",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": []
    },
    "tools.spider_run": {
      "module_docstring": "One-shot Feature Spider Runner",
      "classes": [],
      "functions": [
        {
          "name": "run",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "__future__",
        "argparse",
        "os",
        "subprocess",
        "sys",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "tools.test_attention_optimizations": {
      "module_docstring": "Test Attention Optimizations",
      "classes": [],
      "functions": [
        {
          "name": "benchmark_attention_implementation",
          "doc": "Benchmark a specific attention implementation"
        },
        {
          "name": "test_sdpa_attention",
          "doc": "Test SDPA (Scaled Dot Product Attention) implementation"
        },
        {
          "name": "test_grouped_query_attention",
          "doc": "Test Grouped Query Attention optimization"
        },
        {
          "name": "install_flash_attention",
          "doc": "Install Flash Attention if not available"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "json",
        "torch",
        "gc",
        "modules.tts_engine",
        "flash_attn",
        "traceback",
        "subprocess"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "tools.test_batched_inference": {
      "module_docstring": "Batched T3 Inference Tester",
      "classes": [],
      "functions": [
        {
          "name": "load_batching_plan",
          "doc": "Load batching plan from analysis file"
        },
        {
          "name": "prepare_text_batches",
          "doc": "Prepare text batches from batching plan"
        },
        {
          "name": "tokenize_text_batch",
          "doc": "Tokenize a batch of text chunks"
        },
        {
          "name": "benchmark_sequential_inference",
          "doc": "Benchmark sequential processing (current method)"
        },
        {
          "name": "benchmark_batched_inference",
          "doc": "Benchmark batched processing"
        },
        {
          "name": "run_batch_comparison",
          "doc": "Run comprehensive comparison of sequential vs batched inference"
        },
        {
          "name": "analyze_batch_results",
          "doc": "Analyze overall batching performance"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "json",
        "pathlib",
        "typing",
        "torch",
        "gc",
        "modules.tts_engine"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "sys_exit"
      ]
    },
    "tools.test_compile_fix": {
      "module_docstring": "Quick test script to verify torch.compile fix impact",
      "classes": [],
      "functions": [
        {
          "name": "clear_memory",
          "doc": "Clear GPU memory"
        },
        {
          "name": "get_test_voice",
          "doc": "Get first available voice for testing"
        },
        {
          "name": "run_quick_inference_test",
          "doc": "Run a simple inference test and measure time"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "torch",
        "gc",
        "modules.tts_engine",
        "modules.file_manager",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.test_cuda_integration": {
      "module_docstring": "Test CUDA Optimizer Integration",
      "classes": [],
      "functions": [
        {
          "name": "clear_memory",
          "doc": "Clear GPU memory"
        },
        {
          "name": "get_test_voice",
          "doc": "Get first available voice for testing"
        },
        {
          "name": "test_cuda_optimizer_integration",
          "doc": "Test CUDA optimizer integration"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "torch",
        "gc",
        "modules.tts_engine",
        "modules.file_manager",
        "modules.real_tts_optimizer",
        "modules.cuda_optimizer",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.test_dual_queue_pipeline": {
      "module_docstring": "Dual Queue Pipeline Performance Test",
      "classes": [
        {
          "name": "DualQueueManager",
          "doc": "Manages dual queue system for T3 \u2192 S3Gen pipeline",
          "methods": [
            "switch_queues",
            "get_queue_status"
          ]
        }
      ],
      "functions": [
        {
          "name": "load_test_content",
          "doc": "Load designated test files"
        },
        {
          "name": "prepare_text_chunks",
          "doc": "Process text into chunks for testing"
        },
        {
          "name": "t3_worker",
          "doc": "T3 worker thread - generates speech tokens"
        },
        {
          "name": "s3gen_worker",
          "doc": "S3Gen worker thread - processes speech tokens to audio"
        },
        {
          "name": "monitor_gpu_utilization",
          "doc": "Monitor GPU utilization during pipeline operation"
        },
        {
          "name": "analyze_pipeline_performance",
          "doc": "Analyze pipeline performance results"
        },
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "switch_queues",
          "doc": "Switch queue roles when one becomes full"
        },
        {
          "name": "get_queue_status",
          "doc": "Get current queue status"
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "threading",
        "queue",
        "json",
        "pathlib",
        "collections",
        "torch",
        "gc",
        "psutil",
        "modules.tts_engine",
        "modules.text_processor",
        "subprocess",
        "traceback",
        "src.chatterbox.tts"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "tools.test_flash_attention": {
      "module_docstring": "Flash Attention 2 Testing",
      "classes": [],
      "functions": [
        {
          "name": "benchmark_attention_implementation",
          "doc": "Benchmark a specific attention implementation"
        },
        {
          "name": "load_model_with_attention",
          "doc": "Load model with specific attention implementation"
        },
        {
          "name": "test_flash_attention_vs_eager",
          "doc": "Test Flash Attention 2 vs eager attention"
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "json",
        "torch",
        "gc",
        "modules.tts_engine",
        "modules.tts_engine",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.test_kv_cache_optimization": {
      "module_docstring": "KV Cache Optimization Testing",
      "classes": [],
      "functions": [
        {
          "name": "analyze_kv_cache_usage",
          "doc": "Analyze current KV cache usage patterns"
        },
        {
          "name": "test_kv_cache_preallocation",
          "doc": "Test KV cache pre-allocation optimization"
        },
        {
          "name": "test_cache_memory_layout",
          "doc": "Test memory layout optimizations for KV cache"
        },
        {
          "name": "benchmark_standard_inference",
          "doc": "Benchmark standard inference for comparison"
        },
        {
          "name": "benchmark_contiguous_cache_inference",
          "doc": "Benchmark inference with contiguous cache tensors"
        },
        {
          "name": "recommend_kv_optimizations",
          "doc": "Recommend KV cache optimizations based on analysis"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "json",
        "torch",
        "gc",
        "modules.tts_engine",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.test_s3gen_cpu_performance": {
      "module_docstring": "S3Gen CPU vs GPU Performance Test",
      "classes": [],
      "functions": [
        {
          "name": "clear_memory",
          "doc": "Clear GPU memory"
        },
        {
          "name": "get_test_voice",
          "doc": "Get first available voice for testing"
        },
        {
          "name": "get_memory_usage",
          "doc": "Get current memory usage statistics"
        },
        {
          "name": "create_test_speech_tokens",
          "doc": "Generate speech tokens using T3 for testing S3Gen"
        },
        {
          "name": "test_s3gen_gpu_performance",
          "doc": "Test S3Gen performance on GPU"
        },
        {
          "name": "test_s3gen_cpu_performance",
          "doc": "Test S3Gen performance on CPU"
        },
        {
          "name": "analyze_pipeline_potential",
          "doc": "Analyze potential for T3 GPU + S3Gen CPU pipeline"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "json",
        "torch",
        "gc",
        "psutil",
        "modules.tts_engine",
        "modules.file_manager",
        "src.chatterbox.tts"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.test_sequence_batching": {
      "module_docstring": "Test True Sequence-Level Batching",
      "classes": [],
      "functions": [
        {
          "name": "clear_memory",
          "doc": "Clear GPU memory"
        },
        {
          "name": "get_test_voice",
          "doc": "Get first available voice for testing"
        },
        {
          "name": "create_test_chunks",
          "doc": "Create test chunks with varying parameters to test batching effectiveness"
        },
        {
          "name": "benchmark_individual_processing",
          "doc": "Benchmark individual chunk processing (baseline)"
        },
        {
          "name": "benchmark_sequence_batching",
          "doc": "Benchmark sequence-level batch processing"
        },
        {
          "name": "compare_performance",
          "doc": "Compare performance between individual and batch processing"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "torch",
        "gc",
        "json",
        "modules.tts_engine",
        "modules.file_manager",
        "modules.sequence_batch_processor"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.test_sequential_pipeline": {
      "module_docstring": "Sequential Pipeline Performance Test",
      "classes": [],
      "functions": [
        {
          "name": "get_memory_usage",
          "doc": "Get current memory usage"
        },
        {
          "name": "monitor_gpu_simple",
          "doc": "Simple GPU utilization check"
        },
        {
          "name": "phase_1_t3_processing",
          "doc": "Phase 1: T3 fills RAM with speech tokens (100% GPU for T3)"
        },
        {
          "name": "clear_t3_from_memory",
          "doc": "Phase 1.5: Clear T3 from GPU memory"
        },
        {
          "name": "phase_2_s3gen_processing",
          "doc": "Phase 2: Dual S3Gen workers consume RAM queue (100% GPU for S3Gen)"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "json",
        "gc",
        "pathlib",
        "torch",
        "psutil",
        "modules.tts_engine",
        "modules.text_processor",
        "subprocess",
        "src.chatterbox.tts",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "tools.test_unified_device_mode": {
      "module_docstring": "Test Unified Device Mode Implementation",
      "classes": [],
      "functions": [
        {
          "name": "clear_memory",
          "doc": "Clear GPU memory"
        },
        {
          "name": "get_test_voice",
          "doc": "Get first available voice for testing"
        },
        {
          "name": "check_device_configuration",
          "doc": "Check current device configuration"
        },
        {
          "name": "analyze_model_devices",
          "doc": "Analyze which devices model components are on"
        },
        {
          "name": "test_basic_inference",
          "doc": "Test basic inference to ensure functionality"
        },
        {
          "name": "test_batch_inference",
          "doc": "Test batch inference capability"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "torch",
        "gc",
        "modules.tts_engine",
        "modules.file_manager",
        "config.config",
        "traceback",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "tools.trace_pipeline_flow": {
      "module_docstring": "Pipeline Flow Tracer",
      "classes": [],
      "functions": [
        {
          "name": "monitor_gpu",
          "doc": "Quick GPU utilization check"
        },
        {
          "name": "trace_single_chunk_pipeline",
          "doc": "Trace pipeline for a single chunk with detailed monitoring"
        },
        {
          "name": "analyze_pipeline_bottlenecks",
          "doc": "Analyze where time is spent in the pipeline"
        },
        {
          "name": "trace_multiple_chunks",
          "doc": "Trace multiple chunks to find inter-chunk timing patterns"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "json",
        "torch",
        "gc",
        "modules.tts_engine",
        "src.chatterbox.tts",
        "subprocess",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "tools.trace_t3_inference": {
      "module_docstring": "T3 Inference Breakdown Tracer",
      "classes": [],
      "functions": [
        {
          "name": "monitor_gpu",
          "doc": "Quick GPU utilization check"
        },
        {
          "name": "patched_t3_inference_with_timing",
          "doc": "Monkey-patch T3 inference with detailed timing measurements"
        },
        {
          "name": "trace_t3_inference_detailed",
          "doc": "Trace T3 inference with detailed internal measurements"
        },
        {
          "name": "main",
          "doc": ""
        }
      ],
      "imports": [
        "sys",
        "time",
        "os",
        "pathlib",
        "json",
        "torch",
        "gc",
        "modules.tts_engine",
        "src.chatterbox.models.t3.t3",
        "transformers.generation.logits_process",
        "subprocess",
        "src.chatterbox.models.t3.inference.t3_hf_backend",
        "src.chatterbox.models.t3.inference.alignment_stream_analyzer",
        "traceback"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "tools.tts_trt_benchmark": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "parse_args",
          "doc": ""
        },
        {
          "name": "run_once",
          "doc": ""
        },
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "summarize",
          "doc": ""
        }
      ],
      "imports": [
        "argparse",
        "json",
        "os",
        "subprocess",
        "sys",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": [
        "subprocess",
        "sys_exit"
      ]
    },
    "tools.xtts_finetune_extractor": {
      "module_docstring": "XTTS-Finetune Audio Extractor for ChatterboxTTS",
      "classes": [
        {
          "name": "XTTSAudioFile",
          "doc": "Represents an audio file from XTTS-finetune data.",
          "methods": []
        },
        {
          "name": "XTTSFinetuneExtractor",
          "doc": "Main class for extracting audio from XTTS-finetune model data.",
          "methods": [
            "analyze_directory_structure",
            "load_metadata",
            "analyze_audio_file",
            "assess_audio_quality",
            "classify_emotion",
            "extract_audio_files",
            "select_best_samples",
            "create_voice_samples",
            "generate_report"
          ]
        },
        {
          "name": "SentimentIntensityAnalyzer",
          "doc": "Fallback sentiment analyzer when VADER is not available.",
          "methods": [
            "polarity_scores"
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "doc": ""
        },
        {
          "name": "analyze_directory_structure",
          "doc": "Analyze the XTTS-finetune directory structure."
        },
        {
          "name": "load_metadata",
          "doc": "Load metadata from various formats."
        },
        {
          "name": "analyze_audio_file",
          "doc": "Analyze a single audio file for quality and emotional content."
        },
        {
          "name": "assess_audio_quality",
          "doc": "Assess audio quality using various metrics."
        },
        {
          "name": "classify_emotion",
          "doc": "Classify VADER sentiment score into emotional categories."
        },
        {
          "name": "extract_audio_files",
          "doc": "Extract and analyze all audio files."
        },
        {
          "name": "select_best_samples",
          "doc": "Select the best audio samples for each emotion."
        },
        {
          "name": "create_voice_samples",
          "doc": "Create combined voice samples for each emotion."
        },
        {
          "name": "generate_report",
          "doc": "Generate a detailed extraction report."
        },
        {
          "name": "polarity_scores",
          "doc": ""
        },
        {
          "name": "score_file",
          "doc": ""
        }
      ],
      "imports": [
        "json",
        "os",
        "sys",
        "librosa",
        "soundfile",
        "numpy",
        "pathlib",
        "typing",
        "dataclasses",
        "argparse",
        "re",
        "collections",
        "logging",
        "vaderSentiment.vaderSentiment",
        "csv"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [
        "argparse"
      ],
      "side_effect_signals": [
        "sys_exit"
      ]
    },
    "utils.generate_from_json": {
      "module_docstring": "Direct Audio Generation from JSON Tool",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "doc": "Main function to drive the generation process."
        }
      ],
      "imports": [
        "torch",
        "pathlib",
        "sys",
        "concurrent.futures",
        "time",
        "datetime",
        "config.config",
        "modules.tts_engine",
        "modules.file_manager",
        "wrapper.chunk_loader",
        "chatterbox.tts",
        "modules.progress_tracker"
      ],
      "relative_imports": [],
      "has_main_guard": true,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "wrapper.chunk_editor": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "update_chunk",
          "doc": ""
        }
      ],
      "imports": [],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "wrapper.chunk_loader": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "load_chunks",
          "doc": ""
        },
        {
          "name": "load_metadata",
          "doc": "Extract metadata from JSON file"
        },
        {
          "name": "save_chunks",
          "doc": ""
        }
      ],
      "imports": [
        "json",
        "collections",
        "copy",
        "re"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "wrapper.chunk_player": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "play_chunk_audio",
          "doc": ""
        }
      ],
      "imports": [
        "subprocess",
        "os"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": [
        "subprocess"
      ]
    },
    "wrapper.chunk_revisions": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "accept_revision",
          "doc": "Archive original chunk and replace with revised version."
        }
      ],
      "imports": [
        "os",
        "shutil",
        "pathlib",
        "config.config"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "wrapper.chunk_search": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "search_chunks",
          "doc": ""
        }
      ],
      "imports": [],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "wrapper.chunk_synthesizer": {
      "module_docstring": null,
      "classes": [],
      "functions": [
        {
          "name": "get_original_voice_from_log",
          "doc": "Extract original voice name from run log"
        },
        {
          "name": "get_original_voice_from_filename",
          "doc": "Extract voice name from existing audiobook filename"
        },
        {
          "name": "find_voice_file_by_name",
          "doc": "Find voice file by name in Voice_Samples directory"
        },
        {
          "name": "get_tts_params_for_chunk",
          "doc": "Extract TTS parameters from chunk data or prompt user"
        },
        {
          "name": "synthesize_chunk",
          "doc": "Generate audio for a single chunk using specified or detected voice and TTS parameters"
        },
        {
          "name": "get_float_input",
          "doc": ""
        }
      ],
      "imports": [
        "pathlib",
        "torch",
        "time",
        "re",
        "pydub",
        "modules.tts_engine",
        "modules.file_manager",
        "modules.audio_processor",
        "config.config",
        "modules.tts_engine",
        "io",
        "soundfile",
        "modules.voice_detector",
        "traceback",
        "modules.audio_processor"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    },
    "wrapper.chunk_tool": {
      "module_docstring": "ChatterboxTTS Interactive Chunk Management Tool",
      "classes": [],
      "functions": [
        {
          "name": "select_book_for_repair",
          "doc": "Let user select which book to repair"
        },
        {
          "name": "run_chunk_repair_tool",
          "doc": ""
        },
        {
          "name": "get_float_input",
          "doc": ""
        }
      ],
      "imports": [
        "wrapper.chunk_loader",
        "wrapper.chunk_search",
        "wrapper.chunk_editor",
        "wrapper.chunk_player",
        "wrapper.chunk_synthesizer",
        "wrapper.chunk_revisions",
        "os",
        "config.config",
        "pathlib",
        "pathlib"
      ],
      "relative_imports": [],
      "has_main_guard": false,
      "framework_signals": [],
      "side_effect_signals": []
    }
  },
  "import_graph": {
    "tools.emotion_extractor": [],
    "modules.dual_model_optimizer": [
      "config.config",
      "modules.real_tts_optimizer",
      "src.chatterbox.tts"
    ],
    "tools.tts_trt_benchmark": [],
    "src.chatterbox.models.s3gen.s3gen": [],
    "src.chatterbox.models.s3gen.decoder": [],
    "src.chatterbox.models.t3.inference.t3_hf_backend": [],
    "wrapper.chunk_revisions": [
      "config.config"
    ],
    "src.chatterbox.models.s3gen.flow": [],
    "modules.audio_processor": [
      "config.config",
      "modules.asr_manager"
    ],
    "gradio_tabs.tab6_settings": [
      "modules.text_processor"
    ],
    "modules.file_manager": [
      "config.config"
    ],
    "gradio_tabs.tab7_chunk_tools": [
      "config.config",
      "modules.voice_detector",
      "wrapper.chunk_editor",
      "wrapper.chunk_loader",
      "wrapper.chunk_player",
      "wrapper.chunk_revisions",
      "wrapper.chunk_search",
      "wrapper.chunk_synthesizer"
    ],
    "src.chatterbox.models.voice_encoder.voice_encoder": [],
    "gradio_tabs.tab2_configuration": [
      "config.config"
    ],
    "tools.runtime_summarize": [],
    "modules.vram_bandwidth_monitor": [],
    "src.chatterbox.models.t3.__init__": [],
    "tools.safe_archiver": [],
    "src.chatterbox.models.voice_encoder.melspec": [],
    "tools.gui_static_map": [],
    "src.chatterbox.models.tokenizers.tokenizer": [],
    "src.chatterbox.__init__": [],
    "modules.resume_handler": [
      "config.config",
      "modules.asr_manager",
      "modules.audio_processor",
      "modules.file_manager",
      "modules.progress_tracker",
      "modules.text_processor",
      "modules.tts_engine",
      "src.chatterbox.tts",
      "wrapper.chunk_loader"
    ],
    "tools.cuda_kernel_profiler": [
      "config.config",
      "modules.file_manager",
      "modules.tts_engine"
    ],
    "modules.system_detector": [
      "config.config"
    ],
    "gradio_tabs.__init__": [],
    "src.chatterbox.models.s3gen.transformer.positionwise_feed_forward": [],
    "tools.test_batched_inference": [
      "modules.tts_engine"
    ],
    "src.chatterbox.models.s3gen.f0_predictor": [],
    "tools.test_compile_fix": [
      "modules.file_manager",
      "modules.tts_engine"
    ],
    "src.chatterbox.models.s3gen.utils.class_utils": [],
    "modules.token_usage_logger": [],
    "src.chatterbox.models.s3gen.matcha.flow_matching": [],
    "src.chatterbox.models.s3gen.matcha.decoder": [],
    "tools.test_dual_queue_pipeline": [
      "modules.text_processor",
      "modules.tts_engine",
      "src.chatterbox.tts"
    ],
    "gradio_tabs.tab1_convert_book": [
      "config.config",
      "modules.file_manager",
      "modules.path_validator",
      "modules.system_detector",
      "modules.tts_engine"
    ],
    "modules.dual_tts_engine": [
      "config.config",
      "src.chatterbox.tts"
    ],
    "modules.simple_token_logger": [],
    "src.chatterbox.models.s3gen.__init__": [],
    "modules.gui_json_generator": [
      "config.config",
      "modules.file_manager",
      "modules.progress_tracker",
      "modules.tts_engine",
      "src.chatterbox.tts",
      "tools.combine_only",
      "wrapper.chunk_loader"
    ],
    "gradio_tabs.tab8_json_generate": [
      "config.config",
      "modules.file_manager",
      "modules.gui_json_generator"
    ],
    "scripts.make_backup": [],
    "launch": [],
    "tools.trace_t3_inference": [
      "modules.tts_engine",
      "src.chatterbox.models.t3.inference.alignment_stream_analyzer",
      "src.chatterbox.models.t3.inference.t3_hf_backend",
      "src.chatterbox.models.t3.t3"
    ],
    "tools.test_sequence_batching": [
      "modules.file_manager",
      "modules.sequence_batch_processor",
      "modules.tts_engine"
    ],
    "tools.exporters.t3_fx_export": [
      "config.config",
      "src.chatterbox.models.t3.llama_configs"
    ],
    "tools.gui_walker": [],
    "gradio_main_interface": [
      "gradio_tabs.tab1_convert_book",
      "gradio_tabs.tab2_configuration",
      "gradio_tabs.tab4_combine_audio",
      "gradio_tabs.tab5_prepare_text",
      "gradio_tabs.tab6_settings",
      "gradio_tabs.tab7_chunk_tools",
      "gradio_tabs.tab8_json_generate"
    ],
    "modules.voice_detector": [
      "config.config",
      "modules.file_manager"
    ],
    "src.chatterbox.models.s3gen.transformer.subsampling": [],
    "modules.advanced_optimizations": [],
    "modules.asr_manager": [
      "config.config"
    ],
    "src.chatterbox.models.s3gen.utils.mask": [],
    "tools.analyze_book_json_for_batching": [],
    "modules.sequence_batch_processor": [],
    "tools.test_cuda_integration": [
      "modules.cuda_optimizer",
      "modules.file_manager",
      "modules.real_tts_optimizer",
      "modules.tts_engine"
    ],
    "interface": [
      "config.config",
      "modules.audio_processor",
      "modules.file_manager",
      "modules.progress_tracker",
      "modules.resume_handler",
      "modules.system_detector",
      "modules.text_processor",
      "modules.tts_engine",
      "src.chatterbox.tts",
      "tools.combine_only"
    ],
    "main_launcher": [
      "config.config",
      "interface",
      "modules.resume_handler",
      "modules.text_processor",
      "modules.tts_engine",
      "tools.combine_only",
      "utils.generate_from_json",
      "wrapper.chunk_loader",
      "wrapper.chunk_tool"
    ],
    "src.chatterbox.models.t3.modules.learned_pos_emb": [],
    "modules.cuda_optimizer": [],
    "tools.test_kv_cache_optimization": [
      "modules.tts_engine"
    ],
    "modules.onnx_optimizer": [],
    "src.chatterbox.models.s3gen.hifigan": [],
    "src.chatterbox.models.t3.inference.alignment_stream_analyzer": [],
    "tools.test_sequential_pipeline": [
      "modules.text_processor",
      "modules.tts_engine",
      "src.chatterbox.tts"
    ],
    "modules.dual_t3_engine": [
      "config.config",
      "src.chatterbox.tts"
    ],
    "src.chatterbox.models.s3gen.matcha.transformer": [],
    "tools.path_checker": [
      "config.config",
      "modules.path_validator"
    ],
    "tools.generate_from_json": [
      "config.config",
      "modules.file_manager",
      "modules.progress_tracker",
      "modules.tts_engine",
      "wrapper.chunk_loader"
    ],
    "tools.spider_ci": [],
    "tools.headless_performance_test": [
      "config.config",
      "modules.file_manager",
      "modules.terminal_logger",
      "modules.tts_engine",
      "src.chatterbox.tts"
    ],
    "tools.audio_emotion_scanner": [],
    "modules.t3_standalone_export": [
      "src.chatterbox.models.t3.modules.cond_enc",
      "src.chatterbox.models.t3.t3",
      "src.chatterbox.models.tokenizers.tokenizer"
    ],
    "src.chatterbox.models.s3gen.flow_matching": [],
    "modules.t3_minimal_export": [
      "modules.t3_standalone_export",
      "src.chatterbox.models.t3.modules.cond_enc"
    ],
    "src.chatterbox.models.s3gen.xvector": [],
    "utils.generate_from_json": [
      "config.config",
      "modules.file_manager",
      "modules.progress_tracker",
      "modules.tts_engine",
      "wrapper.chunk_loader"
    ],
    "src.chatterbox.models.s3gen.transformer.upsample_encoder": [],
    "tools.xtts_finetune_extractor": [],
    "tools.feature_run_logger": [],
    "src.chatterbox.models.voice_encoder.__init__": [],
    "src.chatterbox.models.s3tokenizer.s3tokenizer": [],
    "tools.spider_run": [],
    "src.chatterbox.models.s3gen.transformer.convolution": [],
    "src.chatterbox.models.t3.modules.perceiver": [],
    "modules.token_analyzer": [
      "config.config"
    ],
    "tools.measure_token_memory": [
      "modules.file_manager",
      "modules.tts_engine",
      "src.chatterbox.tts"
    ],
    "tools.analyze_attention_implementation": [
      "modules.tts_engine"
    ],
    "wrapper.chunk_loader": [],
    "gradio_tabs.tab4_combine_audio": [
      "modules.audio_processor",
      "modules.file_manager",
      "tools.combine_only"
    ],
    "wrapper.chunk_player": [],
    "src.chatterbox.models.s3gen.const": [],
    "modules.gpu_bandwidth_monitor": [],
    "src.chatterbox.models.t3.llama_configs": [],
    "wrapper.chunk_editor": [],
    "src.chatterbox.models.tokenizers.__init__": [],
    "wrapper.chunk_search": [],
    "tools.run_tts_once": [
      "modules.tts_engine"
    ],
    "src.chatterbox.models.s3gen.transformer.encoder_layer": [],
    "tools.test_attention_optimizations": [
      "modules.tts_engine"
    ],
    "src.chatterbox.models.s3gen.transformer.__init__": [],
    "tools.combine_only": [
      "config.config",
      "modules.audio_processor",
      "modules.file_manager",
      "modules.progress_tracker"
    ],
    "src.chatterbox.models.s3gen.transformer.activation": [],
    "Voice_Samples.mel": [],
    "start": [
      "main_launcher",
      "modules.text_processor",
      "wrapper.chunk_tool"
    ],
    "tools.trace_pipeline_flow": [
      "modules.tts_engine",
      "src.chatterbox.tts"
    ],
    "modules.batch_processor": [
      "modules.tts_engine"
    ],
    "modules.terminal_logger": [
      "config.config"
    ],
    "chatterbox_gui": [
      "config.config",
      "interface",
      "modules.file_manager",
      "modules.gui_json_generator",
      "modules.progress_tracker",
      "modules.resume_handler",
      "modules.simple_token_logger",
      "modules.system_detector",
      "modules.terminal_logger",
      "modules.text_processor",
      "modules.token_analyzer",
      "modules.tts_engine",
      "modules.voice_detector",
      "tools.combine_only",
      "utils.generate_from_json",
      "wrapper.chunk_loader",
      "wrapper.chunk_player",
      "wrapper.chunk_revisions",
      "wrapper.chunk_search",
      "wrapper.chunk_synthesizer",
      "wrapper.chunk_tool"
    ],
    "config.__init__": [],
    "config.config": [],
    "gradio_tabs.tab5_prepare_text": [
      "config.config",
      "modules.path_validator",
      "modules.tts_engine"
    ],
    "modules.tts_engine": [
      "config.config",
      "modules.asr_manager",
      "modules.audio_processor",
      "modules.file_manager",
      "modules.progress_tracker",
      "modules.real_tts_optimizer",
      "modules.terminal_logger",
      "modules.text_processor",
      "modules.voice_detector",
      "src.chatterbox.tts",
      "wrapper.chunk_loader"
    ],
    "src.chatterbox.models.s3gen.transformer.attention": [],
    "tools.ort_gpu_diagnose": [],
    "tools.quick_batching_test": [
      "modules.tts_engine"
    ],
    "tools.test_flash_attention": [
      "modules.tts_engine"
    ],
    "src.chatterbox.models.t3.modules.cond_enc": [],
    "src.chatterbox.models.t3.t3": [],
    "modules.path_validator": [
      "config.config",
      "modules.file_manager"
    ],
    "modules.progress_tracker": [
      "config.config",
      "modules.terminal_logger",
      "modules.tts_engine"
    ],
    "tools.test_s3gen_cpu_performance": [
      "modules.file_manager",
      "modules.tts_engine",
      "src.chatterbox.tts"
    ],
    "gradio_launcher": [
      "gradio_main_interface"
    ],
    "src.chatterbox.text_utils": [],
    "src.chatterbox.vc": [],
    "wrapper.chunk_tool": [
      "config.config",
      "wrapper.chunk_editor",
      "wrapper.chunk_loader",
      "wrapper.chunk_player",
      "wrapper.chunk_revisions",
      "wrapper.chunk_search",
      "wrapper.chunk_synthesizer"
    ],
    "modules.bandwidth_monitor": [],
    "src.chatterbox.models.voice_encoder.config": [],
    "tools.config_audit": [],
    "gradio_app": [
      "modules.audio_processor",
      "modules.file_manager",
      "modules.text_processor",
      "src.chatterbox.tts"
    ],
    "src.chatterbox.models.t3.modules.t3_config": [],
    "modules.text_processor": [
      "config.config"
    ],
    "modules.real_tts_optimizer": [
      "config.config"
    ],
    "tools.test_unified_device_mode": [
      "config.config",
      "modules.file_manager",
      "modules.tts_engine"
    ],
    "src.chatterbox.models.s3tokenizer.__init__": [],
    "src.chatterbox.models.s3gen.utils.mel": [],
    "wrapper.chunk_synthesizer": [
      "config.config",
      "modules.audio_processor",
      "modules.file_manager",
      "modules.tts_engine",
      "modules.voice_detector"
    ],
    "modules.token_calculator": [],
    "tools.emotional_audio_enhancer": [],
    "src.chatterbox.models.s3gen.transformer.embedding": [],
    "tools.feature_spider": [],
    "src.chatterbox.tts": [
      "config.config"
    ],
    "src.chatterbox.models.s3gen.matcha.text_encoder": []
  },
  "topo_order": [
    "tools.emotion_extractor",
    "modules.dual_model_optimizer",
    "tools.tts_trt_benchmark",
    "src.chatterbox.models.s3gen.s3gen",
    "src.chatterbox.models.s3gen.decoder",
    "src.chatterbox.models.s3gen.flow",
    "src.chatterbox.models.voice_encoder.voice_encoder",
    "tools.runtime_summarize",
    "modules.vram_bandwidth_monitor",
    "src.chatterbox.models.t3.__init__",
    "tools.safe_archiver",
    "src.chatterbox.models.voice_encoder.melspec",
    "tools.gui_static_map",
    "src.chatterbox.__init__",
    "tools.cuda_kernel_profiler",
    "gradio_tabs.__init__",
    "src.chatterbox.models.s3gen.transformer.positionwise_feed_forward",
    "tools.test_batched_inference",
    "src.chatterbox.models.s3gen.f0_predictor",
    "tools.test_compile_fix",
    "src.chatterbox.models.s3gen.utils.class_utils",
    "modules.token_usage_logger",
    "src.chatterbox.models.s3gen.matcha.flow_matching",
    "src.chatterbox.models.s3gen.matcha.decoder",
    "tools.test_dual_queue_pipeline",
    "modules.dual_tts_engine",
    "src.chatterbox.models.s3gen.__init__",
    "scripts.make_backup",
    "launch",
    "tools.trace_t3_inference",
    "tools.test_sequence_batching",
    "tools.exporters.t3_fx_export",
    "tools.gui_walker",
    "src.chatterbox.models.s3gen.transformer.subsampling",
    "modules.advanced_optimizations",
    "src.chatterbox.models.s3gen.utils.mask",
    "tools.analyze_book_json_for_batching",
    "tools.test_cuda_integration",
    "src.chatterbox.models.t3.modules.learned_pos_emb",
    "tools.test_kv_cache_optimization",
    "modules.onnx_optimizer",
    "src.chatterbox.models.s3gen.hifigan",
    "tools.test_sequential_pipeline",
    "modules.dual_t3_engine",
    "src.chatterbox.models.s3gen.matcha.transformer",
    "tools.path_checker",
    "tools.generate_from_json",
    "tools.spider_ci",
    "tools.headless_performance_test",
    "tools.audio_emotion_scanner",
    "src.chatterbox.models.s3gen.flow_matching",
    "modules.t3_minimal_export",
    "src.chatterbox.models.s3gen.xvector",
    "src.chatterbox.models.s3gen.transformer.upsample_encoder",
    "tools.xtts_finetune_extractor",
    "tools.feature_run_logger",
    "src.chatterbox.models.voice_encoder.__init__",
    "src.chatterbox.models.s3tokenizer.s3tokenizer",
    "tools.spider_run",
    "src.chatterbox.models.s3gen.transformer.convolution",
    "src.chatterbox.models.t3.modules.perceiver",
    "tools.measure_token_memory",
    "tools.analyze_attention_implementation",
    "src.chatterbox.models.s3gen.const",
    "modules.gpu_bandwidth_monitor",
    "src.chatterbox.models.tokenizers.__init__",
    "tools.run_tts_once",
    "src.chatterbox.models.s3gen.transformer.encoder_layer",
    "tools.test_attention_optimizations",
    "src.chatterbox.models.s3gen.transformer.__init__",
    "src.chatterbox.models.s3gen.transformer.activation",
    "Voice_Samples.mel",
    "start",
    "tools.trace_pipeline_flow",
    "modules.batch_processor",
    "chatterbox_gui",
    "config.__init__",
    "src.chatterbox.models.s3gen.transformer.attention",
    "tools.ort_gpu_diagnose",
    "tools.quick_batching_test",
    "tools.test_flash_attention",
    "tools.test_s3gen_cpu_performance",
    "gradio_launcher",
    "src.chatterbox.text_utils",
    "src.chatterbox.vc",
    "modules.bandwidth_monitor",
    "src.chatterbox.models.voice_encoder.config",
    "tools.config_audit",
    "gradio_app",
    "src.chatterbox.models.t3.modules.t3_config",
    "tools.test_unified_device_mode",
    "src.chatterbox.models.s3tokenizer.__init__",
    "src.chatterbox.models.s3gen.utils.mel",
    "modules.token_calculator",
    "tools.emotional_audio_enhancer",
    "src.chatterbox.models.s3gen.transformer.embedding",
    "tools.feature_spider",
    "src.chatterbox.models.s3gen.matcha.text_encoder",
    "src.chatterbox.models.t3.inference.alignment_stream_analyzer",
    "src.chatterbox.models.t3.inference.t3_hf_backend",
    "modules.sequence_batch_processor",
    "src.chatterbox.models.t3.llama_configs",
    "modules.cuda_optimizer",
    "modules.t3_standalone_export",
    "main_launcher",
    "modules.token_analyzer",
    "modules.simple_token_logger",
    "gradio_main_interface",
    "src.chatterbox.models.tokenizers.tokenizer",
    "src.chatterbox.models.t3.t3",
    "src.chatterbox.models.t3.modules.cond_enc",
    "interface",
    "wrapper.chunk_tool",
    "utils.generate_from_json",
    "gradio_tabs.tab1_convert_book",
    "gradio_tabs.tab6_settings",
    "gradio_tabs.tab5_prepare_text",
    "gradio_tabs.tab4_combine_audio",
    "gradio_tabs.tab7_chunk_tools",
    "gradio_tabs.tab8_json_generate",
    "gradio_tabs.tab2_configuration",
    "modules.resume_handler",
    "modules.system_detector",
    "modules.path_validator",
    "wrapper.chunk_synthesizer",
    "wrapper.chunk_player",
    "wrapper.chunk_revisions",
    "wrapper.chunk_editor",
    "wrapper.chunk_search",
    "modules.gui_json_generator",
    "tools.combine_only",
    "<cycle>",
    "modules.audio_processor",
    "modules.file_manager",
    "modules.voice_detector",
    "modules.asr_manager",
    "wrapper.chunk_loader",
    "modules.terminal_logger",
    "config.config",
    "modules.tts_engine",
    "modules.progress_tracker",
    "modules.text_processor",
    "modules.real_tts_optimizer",
    "src.chatterbox.tts"
  ],
  "roots": [
    "Voice_Samples.mel",
    "chatterbox_gui",
    "config.__init__",
    "gradio_app",
    "gradio_launcher",
    "gradio_tabs.__init__",
    "launch",
    "modules.advanced_optimizations",
    "modules.bandwidth_monitor",
    "modules.batch_processor",
    "modules.dual_model_optimizer",
    "modules.dual_t3_engine",
    "modules.dual_tts_engine",
    "modules.gpu_bandwidth_monitor",
    "modules.onnx_optimizer",
    "modules.t3_minimal_export",
    "modules.token_calculator",
    "modules.token_usage_logger",
    "modules.vram_bandwidth_monitor",
    "scripts.make_backup",
    "src.chatterbox.__init__",
    "src.chatterbox.models.s3gen.__init__",
    "src.chatterbox.models.s3gen.const",
    "src.chatterbox.models.s3gen.decoder",
    "src.chatterbox.models.s3gen.f0_predictor",
    "src.chatterbox.models.s3gen.flow",
    "src.chatterbox.models.s3gen.flow_matching",
    "src.chatterbox.models.s3gen.hifigan",
    "src.chatterbox.models.s3gen.matcha.decoder",
    "src.chatterbox.models.s3gen.matcha.flow_matching",
    "src.chatterbox.models.s3gen.matcha.text_encoder",
    "src.chatterbox.models.s3gen.matcha.transformer",
    "src.chatterbox.models.s3gen.s3gen",
    "src.chatterbox.models.s3gen.transformer.__init__",
    "src.chatterbox.models.s3gen.transformer.activation",
    "src.chatterbox.models.s3gen.transformer.attention",
    "src.chatterbox.models.s3gen.transformer.convolution",
    "src.chatterbox.models.s3gen.transformer.embedding",
    "src.chatterbox.models.s3gen.transformer.encoder_layer",
    "src.chatterbox.models.s3gen.transformer.positionwise_feed_forward",
    "src.chatterbox.models.s3gen.transformer.subsampling",
    "src.chatterbox.models.s3gen.transformer.upsample_encoder",
    "src.chatterbox.models.s3gen.utils.class_utils",
    "src.chatterbox.models.s3gen.utils.mask",
    "src.chatterbox.models.s3gen.utils.mel",
    "src.chatterbox.models.s3gen.xvector",
    "src.chatterbox.models.s3tokenizer.__init__",
    "src.chatterbox.models.s3tokenizer.s3tokenizer",
    "src.chatterbox.models.t3.__init__",
    "src.chatterbox.models.t3.modules.learned_pos_emb",
    "src.chatterbox.models.t3.modules.perceiver",
    "src.chatterbox.models.t3.modules.t3_config",
    "src.chatterbox.models.tokenizers.__init__",
    "src.chatterbox.models.voice_encoder.__init__",
    "src.chatterbox.models.voice_encoder.config",
    "src.chatterbox.models.voice_encoder.melspec",
    "src.chatterbox.models.voice_encoder.voice_encoder",
    "src.chatterbox.text_utils",
    "src.chatterbox.vc",
    "start",
    "tools.analyze_attention_implementation",
    "tools.analyze_book_json_for_batching",
    "tools.audio_emotion_scanner",
    "tools.config_audit",
    "tools.cuda_kernel_profiler",
    "tools.emotion_extractor",
    "tools.emotional_audio_enhancer",
    "tools.exporters.t3_fx_export",
    "tools.feature_run_logger",
    "tools.feature_spider",
    "tools.generate_from_json",
    "tools.gui_static_map",
    "tools.gui_walker",
    "tools.headless_performance_test",
    "tools.measure_token_memory",
    "tools.ort_gpu_diagnose",
    "tools.path_checker",
    "tools.quick_batching_test",
    "tools.run_tts_once",
    "tools.runtime_summarize",
    "tools.safe_archiver",
    "tools.spider_ci",
    "tools.spider_run",
    "tools.test_attention_optimizations",
    "tools.test_batched_inference",
    "tools.test_compile_fix",
    "tools.test_cuda_integration",
    "tools.test_dual_queue_pipeline",
    "tools.test_flash_attention",
    "tools.test_kv_cache_optimization",
    "tools.test_s3gen_cpu_performance",
    "tools.test_sequence_batching",
    "tools.test_sequential_pipeline",
    "tools.test_unified_device_mode",
    "tools.trace_pipeline_flow",
    "tools.trace_t3_inference",
    "tools.tts_trt_benchmark",
    "tools.xtts_finetune_extractor"
  ],
  "leaves": [
    "Voice_Samples.mel",
    "config.__init__",
    "config.config",
    "gradio_tabs.__init__",
    "launch",
    "modules.advanced_optimizations",
    "modules.bandwidth_monitor",
    "modules.cuda_optimizer",
    "modules.gpu_bandwidth_monitor",
    "modules.onnx_optimizer",
    "modules.sequence_batch_processor",
    "modules.simple_token_logger",
    "modules.token_calculator",
    "modules.token_usage_logger",
    "modules.vram_bandwidth_monitor",
    "scripts.make_backup",
    "src.chatterbox.__init__",
    "src.chatterbox.models.s3gen.__init__",
    "src.chatterbox.models.s3gen.const",
    "src.chatterbox.models.s3gen.decoder",
    "src.chatterbox.models.s3gen.f0_predictor",
    "src.chatterbox.models.s3gen.flow",
    "src.chatterbox.models.s3gen.flow_matching",
    "src.chatterbox.models.s3gen.hifigan",
    "src.chatterbox.models.s3gen.matcha.decoder",
    "src.chatterbox.models.s3gen.matcha.flow_matching",
    "src.chatterbox.models.s3gen.matcha.text_encoder",
    "src.chatterbox.models.s3gen.matcha.transformer",
    "src.chatterbox.models.s3gen.s3gen",
    "src.chatterbox.models.s3gen.transformer.__init__",
    "src.chatterbox.models.s3gen.transformer.activation",
    "src.chatterbox.models.s3gen.transformer.attention",
    "src.chatterbox.models.s3gen.transformer.convolution",
    "src.chatterbox.models.s3gen.transformer.embedding",
    "src.chatterbox.models.s3gen.transformer.encoder_layer",
    "src.chatterbox.models.s3gen.transformer.positionwise_feed_forward",
    "src.chatterbox.models.s3gen.transformer.subsampling",
    "src.chatterbox.models.s3gen.transformer.upsample_encoder",
    "src.chatterbox.models.s3gen.utils.class_utils",
    "src.chatterbox.models.s3gen.utils.mask",
    "src.chatterbox.models.s3gen.utils.mel",
    "src.chatterbox.models.s3gen.xvector",
    "src.chatterbox.models.s3tokenizer.__init__",
    "src.chatterbox.models.s3tokenizer.s3tokenizer",
    "src.chatterbox.models.t3.__init__",
    "src.chatterbox.models.t3.inference.alignment_stream_analyzer",
    "src.chatterbox.models.t3.inference.t3_hf_backend",
    "src.chatterbox.models.t3.llama_configs",
    "src.chatterbox.models.t3.modules.cond_enc",
    "src.chatterbox.models.t3.modules.learned_pos_emb",
    "src.chatterbox.models.t3.modules.perceiver",
    "src.chatterbox.models.t3.modules.t3_config",
    "src.chatterbox.models.t3.t3",
    "src.chatterbox.models.tokenizers.__init__",
    "src.chatterbox.models.tokenizers.tokenizer",
    "src.chatterbox.models.voice_encoder.__init__",
    "src.chatterbox.models.voice_encoder.config",
    "src.chatterbox.models.voice_encoder.melspec",
    "src.chatterbox.models.voice_encoder.voice_encoder",
    "src.chatterbox.text_utils",
    "src.chatterbox.vc",
    "tools.analyze_book_json_for_batching",
    "tools.audio_emotion_scanner",
    "tools.config_audit",
    "tools.emotion_extractor",
    "tools.emotional_audio_enhancer",
    "tools.feature_run_logger",
    "tools.feature_spider",
    "tools.gui_static_map",
    "tools.gui_walker",
    "tools.ort_gpu_diagnose",
    "tools.runtime_summarize",
    "tools.safe_archiver",
    "tools.spider_ci",
    "tools.spider_run",
    "tools.tts_trt_benchmark",
    "tools.xtts_finetune_extractor",
    "wrapper.chunk_editor",
    "wrapper.chunk_loader",
    "wrapper.chunk_player",
    "wrapper.chunk_search"
  ],
  "framework_signals_totals": {
    "argparse": 16
  },
  "side_effect_signals_totals": {
    "sys_exit": 11,
    "env_reads": 4,
    "subprocess": 20,
    "file_io": 2
  }
}